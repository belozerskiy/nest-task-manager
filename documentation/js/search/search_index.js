var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/ApiModule.html",[0,0.951,1,1.876]],["body/modules/ApiModule.html",[0,1.581,1,3.62,2,1.511,3,1.643,4,1.961,5,1.961,6,1.643,7,1.961,8,1.792,9,3.094,10,3.094,11,3.186,12,0.03,13,3.186,14,2.549,15,1.961,16,1.961,17,0.341,18,0.295,19,0.295,20,3.699,21,2.549,22,0.707,23,1.01,24,3.699,25,3.094,26,0.388,27,0.106,28,0.018,29,0.023,30,0.018]],["title/modules/AppModule.html",[0,0.951,31,2.082]],["body/modules/AppModule.html",[0,1.496,1,3.399,2,1.352,3,1.47,4,1.754,5,1.754,6,1.47,7,1.754,8,1.602,12,0.031,14,2.367,15,1.754,16,1.754,17,0.305,18,0.264,19,0.264,21,2.367,22,0.77,23,0.903,26,0.347,27,0.095,28,0.016,29,0.021,30,0.016,31,3.922,32,2.767,33,2.767,34,3.474,35,3.309,36,1.602,37,2.767,38,1.931,39,2.41,40,3.309,41,3.309,42,3.309,43,3.309,44,3.309,45,3.309,46,3.682,47,3.309,48,3.309]],["title/controllers/AuthController.html",[49,1.876,50,2.082]],["body/controllers/AuthController.html",[12,0.031,17,0.244,18,0.211,19,0.211,22,0.688,23,0.722,26,0.278,27,0.076,28,0.013,29,0.018,30,0.013,49,1.543,50,2.473,51,1.543,52,2.211,53,2.211,54,2.643,55,0.313,56,1.437,57,2.409,58,4.48,59,3.264,60,2.643,61,2.964,62,1.437,63,2.643,64,3.817,65,2.601,66,2.601,67,4.906,68,3.817,69,3.817,70,0.812,71,2.643,72,1.326,73,1.326,74,0.561,75,1.326,76,2.781,77,1.437,78,2.005,79,1.926,80,2.643,81,3.817,82,3.817,83,2.643,84,2.781,85,2.211,86,2.211,87,2.211,88,2.375,89,2.211,90,2.211,91,1.543,92,1.926,93,1.543,94,2.211,95,2.211,96,2.211,97,4.48,98,1.543,99,2.643,100,2.643,101,1.713,102,2.643,103,1.437,104,3.817,105,1.326,106,2.643,107,2.643,108,2.643]],["title/modules/AuthModule.html",[0,0.951,11,1.704]],["body/modules/AuthModule.html",[0,1.392,2,1.179,3,1.282,4,1.53,5,1.53,6,1.282,7,2.494,8,2.278,11,3.235,12,0.031,14,2.155,15,1.53,16,1.53,17,0.266,18,0.231,19,0.231,21,2.155,22,0.759,23,0.788,26,0.303,27,0.083,28,0.014,29,0.019,30,0.014,50,3.048,51,2.372,88,2.96,89,2.414,109,2.414,110,2.414,111,2.414,112,2.414,113,2.96,114,3.595,115,2.887,116,2.887,117,2.887,118,2.103,119,4.065,120,1.871,121,2.887,122,2.414,123,2.887,124,2.887,125,2.103,126,2.887,127,3.399,128,2.887,129,2.887,130,2.887]],["title/injectables/AuthService.html",[88,1.704,131,1.556]],["body/injectables/AuthService.html",[12,0.031,17,0.214,18,0.185,19,0.185,22,0.71,23,0.633,26,0.244,27,0.066,28,0.011,29,0.016,30,0.011,38,1.354,55,0.275,56,1.306,57,1.845,59,2.526,61,2.844,66,2.443,70,0.981,72,1.601,73,1.601,74,0.677,75,1.601,76,3.025,77,1.564,78,1.883,79,2.526,84,1.69,88,1.838,90,1.94,91,1.354,92,1.69,93,2.424,94,1.94,95,1.94,105,1.442,118,1.69,131,1.679,132,1.503,133,1.94,134,3.196,135,3.468,136,4.153,137,1.838,138,1.94,139,2.744,140,5.364,141,2.32,142,3.468,143,2.389,144,2.32,145,2.32,146,2.32,147,2.32,148,1.94,149,1.94,150,1.94,151,1.94,152,1.94,153,2.32,154,1.883,155,1.23,156,2.32,157,1.354,158,1.123,159,2.32,160,1.94,161,2.32,162,1.679,163,1.94,164,1.354,165,2.9,166,2.32]],["title/classes/CreateTaskArgsDto.html",[27,0.092,167,2.082]],["body/classes/CreateTaskArgsDto.html",[12,0.03,17,0.339,18,0.294,19,0.294,22,0.634,26,0.387,27,0.137,28,0.017,29,0.023,30,0.017,36,1.783,55,0.436,62,1.805,65,2.826,70,1.02,74,0.704,167,3.106,168,1.09,169,4.458,170,2.826,171,3.08,172,1.665,173,3.454,174,2.126,175,4.794,176,3.682,177,3.682,178,3.454,179,2.149,180,3.454,181,3.492]],["title/classes/CreateTaskDto.html",[27,0.092,182,1.556]],["body/classes/CreateTaskDto.html",[12,0.031,17,0.347,18,0.301,19,0.301,22,0.644,26,0.396,27,0.139,28,0.018,29,0.023,30,0.018,55,0.446,62,1.832,65,2.857,70,1.035,74,0.714,98,2.199,168,1.115,172,1.69,173,3.492,174,2.144,178,3.492,179,2.199,182,2.356,183,4.507,184,2.745,185,4.865,186,3.768,187,3.768,188,4.507]],["title/classes/GetTaskByIdDto.html",[27,0.092,189,2.341]],["body/classes/GetTaskByIdDto.html",[12,0.029,17,0.401,18,0.347,19,0.347,26,0.457,27,0.124,28,0.021,29,0.025,30,0.021,55,0.515,70,0.926,74,0.639,168,1.288,172,1.85,174,2.005,184,3.17,189,3.88,190,3.88,191,4.455,192,2.788,193,4.351]],["title/classes/GetTasksFilterDto.html",[27,0.092,194,1.556]],["body/classes/GetTasksFilterDto.html",[12,0.031,17,0.31,18,0.269,19,0.269,22,0.674,26,0.353,27,0.129,28,0.016,29,0.021,30,0.016,36,1.629,46,3.289,55,0.398,62,1.7,70,0.961,74,0.663,103,1.919,168,0.995,172,1.568,174,1.7,178,2.926,179,1.963,180,3.303,181,3.289,190,3.713,194,2.187,195,2.702,196,2.813,197,4.262,198,4.515,199,3.363,200,3.363,201,2.638,202,3.363,203,3.363,204,2.179,205,1.783,206,5.097,207,3.363,208,4.515,209,3.363,210,3.363]],["title/modules/GraphqlModule.html",[0,0.951,34,1.876]],["body/modules/GraphqlModule.html",[0,1.627,2,1.606,3,1.746,4,2.084,5,2.084,6,1.746,7,2.084,8,1.904,12,0.03,13,3.237,14,2.651,15,2.084,16,2.084,17,0.362,18,0.314,19,0.314,21,2.651,22,0.661,23,1.073,26,0.413,27,0.112,28,0.019,29,0.024,30,0.019,34,3.564,211,3.931,212,3.931,213,3.931,214,3.931]],["title/interfaces/JWTPayload.html",[164,1.876,215,1.876]],["body/interfaces/JWTPayload.html",[12,0.029,17,0.41,18,0.355,19,0.355,28,0.021,29,0.026,30,0.021,55,0.526,74,0.653,162,2.927,164,3.15,172,1.875,174,2.188,215,2.595,216,3.239,217,3.239,218,3.718]],["title/interfaces/JWTResponse.html",[93,1.876,215,1.876]],["body/interfaces/JWTResponse.html",[12,0.029,17,0.408,18,0.353,19,0.353,26,0.464,28,0.021,29,0.026,30,0.021,55,0.523,74,0.649,93,3.14,165,5.045,172,1.868,174,2.183,215,2.581,216,3.221,217,3.221,219,3.698]],["title/injectables/JWTStrategy.html",[114,1.876,131,1.556]],["body/injectables/JWTStrategy.html",[12,0.031,17,0.266,18,0.231,19,0.231,22,0.739,23,0.788,26,0.303,27,0.083,28,0.014,29,0.019,30,0.014,38,1.685,55,0.342,56,1.53,57,2.09,66,2.494,70,0.865,72,1.412,73,1.412,74,0.597,75,1.412,77,1.087,78,1.661,105,1.003,114,2.372,120,1.871,125,2.103,127,2.414,131,1.968,132,1.871,134,1.871,137,2.155,138,2.414,139,2.96,143,1.398,149,2.414,150,2.414,151,2.414,152,2.414,154,1.661,155,1.53,157,1.685,158,1.398,162,1.968,163,3.399,164,2.746,220,2.414,221,4.065,222,2.887,223,4.065,224,2.887,225,2.887,226,2.414,227,2.887,228,2.887,229,2.414,230,4.065,231,1.685,232,2.887,233,2.103,234,2.887,235,2.887,236,2.887,237,2.887]],["title/modules/ModelsModule.html",[0,0.951,113,1.704]],["body/modules/ModelsModule.html",[0,1.527,2,1.688,8,2,12,0.031,17,0.381,18,0.33,19,0.33,21,2.19,22,0.779,23,1.128,26,0.434,27,0.118,28,0.02,29,0.024,30,0.02,37,4.314,38,2.411,113,2.735,139,2.735,238,4.13,239,2.411,240,4.13,241,4.13,242,4.13]],["title/classes/SignUpCredentialsDto.html",[27,0.092,61,1.704]],["body/classes/SignUpCredentialsDto.html",[12,0.03,17,0.333,18,0.289,19,0.289,22,0.627,26,0.38,27,0.135,28,0.017,29,0.022,30,0.017,55,0.428,61,2.512,62,1.784,70,1.008,74,0.696,91,3.084,98,2.111,162,2.559,168,1.071,172,1.646,174,2.111,178,3.424,179,2.111,188,4.419,243,4.419,244,3.025,245,3.424,246,3.617,247,3.617,248,3.617,249,3.617,250,3.617,251,3.617,252,3.617,253,4.738,254,3.617]],["title/classes/TaskEntity.html",[27,0.092,255,1.556]],["body/classes/TaskEntity.html",[12,0.031,17,0.254,18,0.22,19,0.22,22,0.606,26,0.289,27,0.079,28,0.013,29,0.019,30,0.013,36,1.332,55,0.326,62,1.881,65,2.999,70,1.125,72,0.955,73,1.364,74,0.776,75,0.955,103,1.725,137,1.458,168,0.814,170,1.458,172,1.364,173,3.424,174,1.881,180,3.424,192,2.219,201,2.661,205,1.458,231,2.292,233,2.004,255,1.902,256,2.3,257,3.831,258,3.927,259,3.927,260,3.927,261,2.75,262,2.082,263,2.75,264,2.75,265,2.75,266,4.997,267,2.861,268,2.75,269,2.75,270,3.285,271,3.285,272,4.179,273,1.458,274,3.927,275,2.75,276,2.75,277,2.3,278,2.75,279,2.75]],["title/classes/TaskRepository.html",[27,0.092,239,1.876]],["body/classes/TaskRepository.html",[12,0.031,17,0.24,18,0.208,19,0.208,22,0.644,26,0.273,27,0.074,28,0.012,29,0.018,30,0.012,55,0.308,56,1.42,57,2.395,65,2,70,0.803,72,1.31,73,1.31,74,0.554,75,1.31,77,1.42,78,1.99,103,1.833,105,1.31,154,1.99,155,2,158,1.26,168,0.77,170,2,173,1.685,182,2.612,194,2.358,195,2.582,197,4.324,231,2.202,239,2.202,255,1.827,273,1.379,280,2.175,281,3.234,282,2.445,283,4.44,284,2.445,285,2.601,286,2.601,287,2.601,288,2.877,289,2.175,290,2.601,291,2.601,292,1.895,293,2.175,294,1.685,295,2.601,296,2.601,297,2.601,298,1.895,299,2.601,300,2.601,301,2.601,302,2.601,303,2.601,304,2.601,305,2.601]],["title/classes/TaskStatusValidationPipe.html",[27,0.092,306,2.082]],["body/classes/TaskStatusValidationPipe.html",[12,0.031,17,0.267,18,0.231,19,0.231,22,0.539,23,0.791,26,0.304,27,0.083,28,0.014,29,0.019,30,0.014,55,0.343,56,1.534,70,1.003,72,1.415,73,1.415,74,0.692,75,1.415,77,1.534,103,2.207,105,1.415,134,3.054,154,1.184,157,1.691,158,1.403,168,0.857,172,1.415,201,1.403,204,1.877,205,1.536,267,2.11,277,3.408,306,2.64,307,4.277,308,2.423,309,4.075,310,4.713,311,4.713,312,4.713,313,4.075,314,4.075,315,3.434,316,4.075,317,4.075,318,2.897,319,4.075,320,2.897,321,4.075,322,2.897,323,2.897,324,2.897,325,2.897,326,2.897,327,2.897,328,2.897,329,2.423,330,2.897]],["title/controllers/TasksController.html",[49,1.876,331,2.082]],["body/controllers/TasksController.html",[12,0.031,17,0.185,18,0.161,19,0.161,22,0.716,23,0.549,26,0.211,27,0.057,28,0.01,29,0.015,30,0.01,49,1.174,51,1.174,53,1.682,55,0.238,56,1.171,62,1.743,70,0.985,72,1.608,73,1.608,74,0.68,75,1.608,77,1.743,78,2.155,85,1.682,86,1.682,87,2.601,96,1.682,98,1.174,101,1.303,103,1.743,105,1.7,120,1.303,182,2.371,192,2.371,194,2.073,195,1.649,201,2.073,205,1.066,226,1.682,255,0.974,262,2.87,282,2.015,284,1.303,288,2.015,292,1.465,294,1.303,298,1.465,306,2.015,331,2.015,332,1.682,333,3.181,334,2.601,335,3.181,336,2.771,337,2.011,338,2.011,339,1.682,340,2.011,341,2.011,342,1.682,343,3.11,344,2.011,345,1.682,346,2.011,347,1.682,348,2.011,349,2.011,350,2.011,351,2.011,352,2.011,353,2.011,354,3.804,355,2.011,356,1.842,357,1.682,358,1.682,359,2.011,360,2.011,361,1.682,362,1.682,363,1.682,364,2.011,365,2.011,366,3.804,367,2.011,368,2.011,369,1.682,370,2.011,371,1.682,372,1.682,373,1.682,374,2.011,375,1.682,376,2.011,377,3.11,378,2.011,379,2.011,380,2.011,381,1.682]],["title/modules/TasksModule.html",[0,0.951,13,1.704]],["body/modules/TasksModule.html",[0,1.466,2,1.299,3,1.412,4,1.686,5,1.686,6,1.412,7,2.625,8,2.398,11,3.051,12,0.031,13,3.293,14,2.304,15,1.686,16,1.686,17,0.293,18,0.254,19,0.254,21,2.304,22,0.737,23,0.868,25,2.659,26,0.334,27,0.091,28,0.015,29,0.021,30,0.015,51,2.537,113,3.051,122,2.659,331,3.209,356,3.032,357,2.659,382,2.659,383,3.18,384,2.659,385,2.659,386,3.18,387,3.18]],["title/classes/TasksResolver.html",[27,0.092,388,2.341]],["body/classes/TasksResolver.html",[12,0.031,17,0.202,18,0.175,19,0.175,22,0.67,26,0.23,27,0.063,28,0.01,29,0.016,30,0.01,36,1.063,55,0.26,56,1.252,57,1.784,62,1.687,70,1.025,72,1.673,73,1.673,74,0.707,75,1.673,77,1.687,78,2.216,101,1.422,103,1.252,105,1.673,137,1.164,154,0.897,167,2.904,168,0.65,170,1.164,182,1.611,192,1.945,194,2.17,195,1.164,255,2.455,262,2.129,282,2.155,284,1.422,288,2.155,293,1.836,294,1.422,298,2.926,335,3.359,336,2.926,345,1.836,356,2.455,362,1.836,369,1.836,371,1.836,372,1.836,373,1.836,375,1.836,381,1.836,388,2.423,389,1.836,390,3.326,391,2.195,392,2.195,393,3.326,394,2.195,395,2.195,396,3.326,397,2.195,398,2.195,399,2.195,400,2.904,401,2.195,402,4.016,403,2.195,404,3.326,405,4.016,406,4.016,407,2.195,408,2.195,409,2.195,410,2.195,411,2.195,412,2.195]],["title/injectables/TasksService.html",[131,1.556,356,1.556]],["body/injectables/TasksService.html",[12,0.031,17,0.179,18,0.155,19,0.155,22,0.666,23,0.529,26,0.204,27,0.055,28,0.014,29,0.014,30,0.009,55,0.229,56,1.138,57,2.608,70,1.072,72,1.675,73,1.675,74,0.708,75,1.675,77,1.816,78,2.315,101,1.256,103,1.581,105,1.581,131,1.464,132,1.256,137,1.028,148,1.622,154,1.519,155,2.226,157,1.765,158,1.464,160,3.807,170,1.603,182,2.205,192,2.44,194,2.033,195,1.028,201,2.033,204,1.256,205,1.028,239,2.815,255,1.464,262,2.839,273,1.028,282,1.959,284,1.959,288,1.959,292,1.412,294,1.256,333,2.529,334,2.529,336,2.203,339,2.529,342,2.529,347,2.529,356,1.464,358,1.622,361,1.622,413,1.622,414,4.199,415,3.717,416,1.939,417,1.939,418,1.939,419,1.939,420,1.939,421,1.939,422,1.939,423,1.939,424,1.939,425,1.939,426,1.939,427,3.024,428,1.939,429,1.939,430,1.939,431,1.939,432,3.024,433,1.939,434,1.939,435,1.939,436,1.939,437,1.939,438,1.939]],["title/classes/UpdateTaskArgsDto.html",[27,0.092,400,2.082]],["body/classes/UpdateTaskArgsDto.html",[12,0.031,17,0.339,18,0.294,19,0.294,22,0.634,26,0.387,27,0.105,28,0.017,29,0.023,30,0.017,36,1.783,55,0.436,62,1.805,70,1.02,74,0.704,103,2.007,168,1.09,172,1.665,180,3.454,181,3.492,192,2.835,201,2.734,204,2.386,205,1.952,262,2.541,400,3.106,439,4.458,440,3.08,441,4.794,442,3.682,443,3.682]],["title/classes/UserEntity.html",[27,0.092,143,1.556]],["body/classes/UserEntity.html",[12,0.031,17,0.26,18,0.225,19,0.225,22,0.528,26,0.296,27,0.081,28,0.022,29,0.019,30,0.013,55,0.333,56,1.504,57,2.062,62,1.748,70,1.135,72,1.388,73,1.388,74,0.682,75,1.388,77,1.061,78,1.632,105,0.978,137,1.493,143,1.935,154,1.632,155,1.493,162,2.583,168,0.834,172,1.388,174,1.902,192,2.248,231,2.332,233,2.052,245,3.456,257,3.882,262,2.118,270,3.341,271,3.882,272,4.46,273,1.493,444,2.356,445,4.46,446,3.995,447,3.995,448,3.995,449,2.817,450,2.817,451,3.995,452,2.817,453,2.817,454,2.91,455,2.817,456,2.817,457,2.817,458,2.817]],["title/classes/UserRepository.html",[27,0.092,139,1.704]],["body/classes/UserRepository.html",[12,0.031,17,0.209,18,0.181,19,0.181,22,0.646,23,0.619,26,0.238,27,0.065,28,0.011,29,0.016,30,0.011,55,0.268,56,1.284,57,2.489,59,2.484,61,2.823,66,2.59,70,0.872,72,1.423,73,1.423,74,0.602,75,1.423,76,2.484,77,1.543,78,1.393,79,2.484,84,2.484,91,1.324,92,1.652,105,1.423,134,2.655,139,1.808,143,1.651,154,2.175,155,2.721,157,1.99,158,1.984,162,1.984,168,0.671,174,1.543,231,1.99,245,2.655,273,1.202,281,2.985,289,1.897,445,3.811,454,1.652,459,1.897,460,3.41,461,3.41,462,3.41,463,2.268,464,2.268,465,3.41,466,2.268,467,2.268,468,2.268,469,3.41,470,2.268,471,2.268,472,2.268,473,2.268,474,2.268,475,2.268,476,2.268,477,2.268,478,2.268,479,2.268,480,2.268,481,2.268,482,2.268,483,2.268,484,2.268,485,2.268,486,2.268,487,3.41,488,2.268,489,2.268]],["title/coverage.html",[490,3.189]],["body/coverage.html",[6,1.141,12,0.03,19,0.205,27,0.172,28,0.012,29,0.018,30,0.012,39,1.871,49,2.182,50,1.664,52,2.148,61,1.362,66,1.362,74,0.377,88,1.362,91,1.499,93,1.499,103,0.967,114,1.499,131,2.135,133,2.148,139,1.362,143,1.244,158,1.244,164,1.499,167,1.664,169,2.148,170,1.362,171,2.148,182,1.244,183,2.148,184,2.723,189,1.871,190,2.723,191,2.148,194,1.244,195,1.362,196,2.148,215,2.182,217,2.723,218,2.148,219,2.148,220,2.148,239,1.499,243,2.148,244,2.148,255,1.244,256,2.148,280,2.148,306,1.664,307,2.148,308,2.148,329,5.336,331,1.664,332,2.148,356,1.244,388,1.871,389,2.148,400,1.664,413,2.148,439,2.148,440,2.148,444,2.148,459,2.148,490,1.871,491,2.568,492,2.568,493,2.568,494,5.678,495,2.568,496,2.148,497,2.148,498,3.738,499,2.148,500,4.408,501,4.408,502,3.738,503,4.841,504,2.568,505,2.148,506,2.148,507,2.568,508,2.568,509,2.568]],["title/dependencies.html",[3,1.716,510,2.687]],["body/dependencies.html",[3,1.532,12,0.031,23,0.942,27,0.131,28,0.016,29,0.022,30,0.016,36,1.67,38,2.013,98,2.013,118,2.512,120,2.235,125,2.512,179,2.013,229,3.84,273,1.828,454,2.512,511,5.893,512,3.449,513,3.449,514,3.449,515,5.161,516,3.449,517,3.449,518,2.884,519,3.449,520,3.449,521,3.449,522,3.449,523,3.449,524,3.449,525,3.449,526,3.449,527,3.449,528,3.449,529,3.449,530,3.449,531,3.449,532,3.449,533,3.449,534,3.449,535,3.449,536,3.449,537,3.449,538,3.449,539,3.449,540,3.449,541,3.449,542,3.449]],["title/miscellaneous/enumerations.html",[543,1.425,544,3.231]],["body/miscellaneous/enumerations.html",[12,0.029,28,0.021,29,0.026,30,0.021,55,0.532,201,2.631,315,4.254,363,3.759,543,2.383,544,3.759,545,4.495,546,5.433,547,4.544,548,5.433,549,5.433]],["title/miscellaneous/functions.html",[543,1.425,550,3.231]],["body/miscellaneous/functions.html",[6,2.677,12,0.027,28,0.023,29,0.027,30,0.023,55,0.573,506,4.05,543,2.567,550,4.05,551,4.842]],["title/index.html",[55,0.318,552,2.687,553,2.687]],["body/index.html",[12,0.03,18,0.255,28,0.015,29,0.021,30,0.015,65,1.692,281,2.325,490,2.325,518,2.67,547,2.67,554,3.192,555,3.192,556,4.358,557,3.192,558,3.192,559,3.192,560,3.192,561,3.192,562,3.192,563,3.192,564,3.192,565,4.962,566,3.192,567,3.192,568,3.192,569,5.896,570,3.192,571,3.192,572,3.192,573,5.761,574,3.192,575,3.192,576,4.358,577,3.192,578,3.192,579,3.192,580,3.192,581,4.358,582,4.358,583,3.192,584,3.192,585,3.192,586,4.358,587,4.358,588,3.192,589,3.192,590,3.192,591,3.192,592,2.67,593,3.192,594,3.192,595,3.192,596,3.192,597,3.192,598,3.192,599,3.192,600,3.192,601,3.192,602,3.192,603,3.192,604,3.192,605,3.192,606,3.192,607,3.192,608,3.192,609,3.192,610,3.192]],["title/modules.html",[2,1.789]],["body/modules.html",[1,2.436,2,1.705,11,2.212,12,0.025,13,2.752,28,0.02,29,0.025,30,0.02,31,2.704,34,2.436,113,2.212,592,5.184,611,6.199,612,6.199,613,6.286,614,4.173,615,4.173]],["title/overview.html",[616,3.661]],["body/overview.html",[0,0.876,1,3.372,2,1.209,3,1.315,4,1.569,5,1.569,6,1.315,7,1.569,8,1.434,9,2.476,10,2.476,11,3.25,12,0.03,13,3.346,14,2.193,15,1.569,16,1.569,28,0.014,29,0.02,30,0.014,31,3.647,32,2.476,33,2.476,34,3.171,51,1.728,88,2.528,109,2.476,110,2.476,111,2.476,112,2.476,113,2.88,114,3.372,132,1.918,168,0.876,216,2.156,356,2.854,382,2.476,384,2.476,385,2.476,616,2.476,617,2.96,618,4.137,619,2.96,620,2.96]],["title/miscellaneous/variables.html",[543,1.425,621,3.231]],["body/miscellaneous/variables.html",[12,0.031,28,0.018,29,0.023,30,0.018,39,3.523,46,2.72,55,0.442,66,2.564,74,0.71,105,1.297,143,1.808,154,1.525,162,1.808,245,2.419,267,3.523,315,3.523,496,3.122,497,4.045,499,4.045,505,3.122,543,1.979,621,3.122,622,3.733,623,3.733,624,3.733,625,3.733,626,3.733,627,3.733,628,3.733,629,3.733,630,3.733,631,5.365,632,3.733,633,3.733,634,3.733,635,3.733,636,3.733,637,3.733,638,3.733,639,3.733,640,3.733,641,3.733]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":329,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["0.1.13",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["0.11.1",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["0.2.24",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":620,"title":{},"body":{"overview.html":{}}}],["14.6.0",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":618,"title":{},"body":{"overview.html":{}}}],["2.11.0",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["23505",{"_index":480,"title":{},"body":{"classes/UserRepository.html":{}}}],["3",{"_index":619,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.5.4",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":617,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTResponse.html":{}}}],["allowedstatuses",{"_index":312,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["already",{"_index":482,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":593,"title":{},"body":{"index.html":{}}}],["angular",{"_index":564,"title":{},"body":{"index.html":{}}}],["api/api.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["api/auth/dto/sign",{"_index":471,"title":{},"body":{"classes/UserRepository.html":{}}}],["api/tasks/dto/create",{"_index":291,"title":{},"body":{"classes/TaskRepository.html":{}}}],["api/tasks/dto/get",{"_index":293,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TasksResolver.html":{}}}],["api/tasks/tasks.service",{"_index":403,"title":{},"body":{"classes/TasksResolver.html":{}}}],["apimodule",{"_index":1,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apiproperty",{"_index":188,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/SignUpCredentialsDto.html":{}}}],["apiproperty()@isnotempty",{"_index":185,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["apiproperty()@isnotempty()@minlength(3)@maxlength(50",{"_index":248,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8)@maxlength(50",{"_index":246,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["apiresponse",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["apitags('auth",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('tasks",{"_index":364,"title":{},"body":{"controllers/TasksController.html":{}}}],["apollo",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":571,"title":{},"body":{"index.html":{}}}],["applications",{"_index":561,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":31,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":405,"title":{},"body":{"classes/TasksResolver.html":{}}}],["args.dto",{"_index":410,"title":{},"body":{"classes/TasksResolver.html":{}}}],["args.dto.ts",{"_index":171,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"coverage.html":{}}}],["args.dto.ts:12",{"_index":176,"title":{},"body":{"classes/CreateTaskArgsDto.html":{}}}],["args.dto.ts:8",{"_index":177,"title":{},"body":{"classes/CreateTaskArgsDto.html":{}}}],["args/create",{"_index":409,"title":{},"body":{"classes/TasksResolver.html":{}}}],["args/update",{"_index":407,"title":{},"body":{"classes/TasksResolver.html":{}}}],["argstype",{"_index":181,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskArgsDto.html":{}}}],["async",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["auth",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller",{"_index":50,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":226,"title":{},"body":{"injectables/JWTStrategy.html":{},"controllers/TasksController.html":{}}}],["authguard('jwt",{"_index":232,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":603,"title":{},"body":{"index.html":{}}}],["authorized",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["authservice",{"_index":88,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoschemafile",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":615,"title":{},"body":{"modules.html":{}}}],["await",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["backers",{"_index":594,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":323,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["badrequestexception(`${status",{"_index":326,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["baseentity",{"_index":257,"title":{},"body":{"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["bcrypt",{"_index":454,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":458,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcrypt.gensalt",{"_index":488,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":489,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt/bcrypt.js",{"_index":467,"title":{},"body":{"classes/UserRepository.html":{}}}],["body",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["body('status",{"_index":380,"title":{},"body":{"controllers/TasksController.html":{}}}],["body(validationpipe",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":613,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":611,"title":{},"body":{"modules.html":{}}}],["building",{"_index":557,"title":{},"body":{"index.html":{}}}],["catch",{"_index":477,"title":{},"body":{"classes/UserRepository.html":{}}}],["class",{"_index":27,"title":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":168,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_apimodule",{"_index":9,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":10,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_graphqlmodule",{"_index":211,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["cluster_graphqlmodule_imports",{"_index":212,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["cluster_tasksmodule",{"_index":382,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_exports",{"_index":384,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":383,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":385,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["column",{"_index":272,"title":{},"body":{"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["config/typeorm.config",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":468,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('this",{"_index":481,"title":{},"body":{"classes/UserRepository.html":{}}}],["const",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{}}}],["constructor(private",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["constructor(taskrepository",{"_index":416,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(tasksservice",{"_index":391,"title":{},"body":{"classes/TasksResolver.html":{}}}],["constructor(title",{"_index":258,"title":{},"body":{"classes/TaskEntity.html":{}}}],["constructor(username",{"_index":447,"title":{},"body":{"classes/UserEntity.html":{}}}],["constructor(userrepository",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["context",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":49,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":365,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["coverage",{"_index":490,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["createparamdecorator",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":282,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["createtask(@args",{"_index":412,"title":{},"body":{"classes/TasksResolver.html":{}}}],["createtask(@body",{"_index":368,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(createtaskdto",{"_index":284,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["createtaskargsdto",{"_index":167,"title":{"classes/CreateTaskArgsDto.html":{}},"body":{"classes/CreateTaskArgsDto.html":{},"classes/TasksResolver.html":{},"coverage.html":{}}}],["createtaskdto",{"_index":182,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["credentials.dto",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["credentials.dto.ts",{"_index":244,"title":{},"body":{"classes/SignUpCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:15",{"_index":247,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["credentials.dto.ts:9",{"_index":249,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["database",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debug",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorators",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{}}}],["default",{"_index":267,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JWTStrategy.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["delete",{"_index":351,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id",{"_index":376,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id')@useguards(undefined",{"_index":340,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleteresult",{"_index":427,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletetaskbyid",{"_index":333,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetaskbyid(id",{"_index":339,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"index.html":{}}}],["development",{"_index":572,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":549,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto/create",{"_index":358,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/get",{"_index":361,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/sign",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e2e",{"_index":583,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":558,"title":{},"body":{"index.html":{}}}],["entities",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/task.entity",{"_index":290,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entities/user.entity",{"_index":470,"title":{},"body":{"classes/UserRepository.html":{}}}],["entity",{"_index":270,"title":{},"body":{"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["entity.decorator.ts",{"_index":497,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entity.{js,ts",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":289,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(taskentity",{"_index":295,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(userentity",{"_index":472,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":266,"title":{},"body":{"classes/TaskEntity.html":{}}}],["enumerations",{"_index":544,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":478,"title":{},"body":{"classes/UserRepository.html":{}}}],["error.code",{"_index":479,"title":{},"body":{"classes/UserRepository.html":{}}}],["exist",{"_index":483,"title":{},"body":{"classes/UserRepository.html":{}}}],["expiresin",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":26,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":231,"title":{},"body":{"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":228,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":235,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["field",{"_index":180,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/UpdateTaskArgsDto.html":{}}}],["field()@column",{"_index":260,"title":{},"body":{"classes/TaskEntity.html":{}}}],["field()@column({type",{"_index":265,"title":{},"body":{"classes/TaskEntity.html":{}}}],["field()@isnotempty",{"_index":175,"title":{},"body":{"classes/CreateTaskArgsDto.html":{}}}],["field()@primarygeneratedcolumn",{"_index":263,"title":{},"body":{"classes/TaskEntity.html":{}}}],["field(type",{"_index":210,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["field(undefined",{"_index":441,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{}}}],["field({nullable",{"_index":198,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["filter.dto",{"_index":294,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["filter.dto.ts",{"_index":196,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:10",{"_index":200,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filter.dto.ts:16",{"_index":203,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["findtasksbyfilter",{"_index":283,"title":{},"body":{"classes/TaskRepository.html":{}}}],["findtasksbyfilter(tasksfilter",{"_index":286,"title":{},"body":{"classes/TaskRepository.html":{}}}],["found",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["framework",{"_index":556,"title":{},"body":{"index.html":{}}}],["function",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":550,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":343,"title":{},"body":{"controllers/TasksController.html":{}}}],["getaccesstoken",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["getaccesstoken(user",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["getalltasks",{"_index":414,"title":{},"body":{"injectables/TasksService.html":{}}}],["getfilteredtasks",{"_index":415,"title":{},"body":{"injectables/TasksService.html":{}}}],["getfilteredtasks(tasksfilter",{"_index":421,"title":{},"body":{"injectables/TasksService.html":{}}}],["gettask",{"_index":390,"title":{},"body":{"classes/TasksResolver.html":{}}}],["gettask(@args('id",{"_index":411,"title":{},"body":{"classes/TasksResolver.html":{}}}],["gettask(id",{"_index":395,"title":{},"body":{"classes/TasksResolver.html":{}}}],["gettaskbyid",{"_index":334,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyid(@param('id",{"_index":374,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettaskbyid(id",{"_index":342,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyiddto",{"_index":189,"title":{"classes/GetTaskByIdDto.html":{}},"body":{"classes/GetTaskByIdDto.html":{},"coverage.html":{}}}],["gettasks",{"_index":335,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["gettasks(tasksfilter",{"_index":345,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["gettasksfilterdto",{"_index":194,"title":{"classes/GetTasksFilterDto.html":{}},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["getting",{"_index":552,"title":{"index.html":{}},"body":{}}],["getuserentity",{"_index":499,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":614,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["graphql/graphql.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule",{"_index":34,"title":{"modules/GraphqlModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GraphqlModule.html":{},"modules.html":{},"overview.html":{}}}],["graphqlmodule.forroot",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":589,"title":{},"body":{"index.html":{}}}],["hash",{"_index":445,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["hashpassword",{"_index":460,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":462,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":562,"title":{},"body":{"index.html":{}}}],["here",{"_index":600,"title":{},"body":{"index.html":{}}}],["host",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":607,"title":{},"body":{"index.html":{}}}],["id",{"_index":192,"title":{},"body":{"classes/GetTaskByIdDto.html":{},"classes/TaskEntity.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{}}}],["identifier",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":309,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{}}}],["in_progress",{"_index":548,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":55,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["inject",{"_index":425,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectable",{"_index":131,"title":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectrepository",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["injectrepository(userrepository",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["inspired",{"_index":563,"title":{},"body":{"index.html":{}}}],["installation",{"_index":568,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":570,"title":{},"body":{"index.html":{}}}],["interface",{"_index":215,"title":{"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{}},"body":{"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":216,"title":{},"body":{"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["internalservererrorexception",{"_index":469,"title":{},"body":{"classes/UserRepository.html":{}}}],["invalid",{"_index":327,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isenum",{"_index":207,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isenum(taskstatus",{"_index":209,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isnotempty",{"_index":178,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{}}}],["isoptional",{"_index":206,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isvalidstatus",{"_index":313,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isvalidstatus(status",{"_index":319,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["join",{"_index":596,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":234,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["jwtmodule",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":164,"title":{"interfaces/JWTPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"injectables/JWTStrategy.html":{},"coverage.html":{}}}],["jwtresponse",{"_index":93,"title":{"interfaces/JWTResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JWTResponse.html":{},"coverage.html":{}}}],["jwtservice",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":114,"title":{"injectables/JWTStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttoken",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["kamil",{"_index":604,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["license",{"_index":610,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":587,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lower(description",{"_index":303,"title":{},"body":{"classes/TaskRepository.html":{}}}],["lower(title",{"_index":302,"title":{},"body":{"classes/TaskRepository.html":{}}}],["matching",{"_index":29,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":251,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["maxlength(50",{"_index":253,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["metadata",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["minlength",{"_index":250,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["minlength(3",{"_index":252,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["minlength(8",{"_index":254,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["miscellaneous",{"_index":543,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":586,"title":{},"body":{"index.html":{}}}],["mode",{"_index":576,"title":{},"body":{"index.html":{}}}],["models/entities/task",{"_index":204,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{}}}],["models/entities/task.entity",{"_index":426,"title":{},"body":{"injectables/TasksService.html":{}}}],["models/entities/user.entity",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["models/repositories/task.repository",{"_index":428,"title":{},"body":{"injectables/TasksService.html":{}}}],["models/repositories/user.repository",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["modelsmodule",{"_index":113,"title":{"modules/ModelsModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["module",{"_index":0,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":599,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":406,"title":{},"body":{"classes/TasksResolver.html":{}}}],["mutation(undefined",{"_index":393,"title":{},"body":{"classes/TasksResolver.html":{}}}],["myśliwiec",{"_index":605,"title":{},"body":{"index.html":{}}}],["name",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["nest",{"_index":565,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":609,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/GraphqlModule.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskArgsDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskDto.html":{},"classes/SignUpCredentialsDto.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"dependencies.html":{}}}],["new",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["node.js",{"_index":555,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["notfoundexception('user",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`task",{"_index":432,"title":{},"body":{"injectables/TasksService.html":{}}}],["npm",{"_index":569,"title":{},"body":{"index.html":{}}}],["null",{"_index":486,"title":{},"body":{"classes/UserRepository.html":{}}}],["nullable",{"_index":208,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["number",{"_index":262,"title":{},"body":{"classes/TaskEntity.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{}}}],["object.keys(tasksfilter).length",{"_index":371,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["objecttype",{"_index":274,"title":{},"body":{"classes/TaskEntity.html":{}}}],["open",{"_index":547,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["optional",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["overview",{"_index":616,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":510,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":350,"title":{},"body":{"controllers/TasksController.html":{}}}],["param('id",{"_index":377,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["parseintpipe",{"_index":354,"title":{},"body":{"controllers/TasksController.html":{}}}],["passport",{"_index":229,"title":{},"body":{"injectables/JWTStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":225,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["password",{"_index":245,"title":{},"body":{"classes/SignUpCredentialsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":352,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status",{"_index":379,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status')@useguards(undefined",{"_index":348,"title":{},"body":{"controllers/TasksController.html":{}}}],["payload",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["payload.ts",{"_index":218,"title":{},"body":{"interfaces/JWTPayload.html":{},"coverage.html":{}}}],["pg",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["pipe/task",{"_index":359,"title":{},"body":{"controllers/TasksController.html":{}}}],["pipetransform",{"_index":310,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["playground",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":597,"title":{},"body":{"index.html":{}}}],["port",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('signin",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin')@apiresponse({status",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@apiresponse({status",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(undefined)@usepipes(validationpipe",{"_index":337,"title":{},"body":{"controllers/TasksController.html":{}}}],["postgres",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["primarygeneratedcolumn",{"_index":271,"title":{},"body":{"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["private",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/UserRepository.html":{}}}],["production",{"_index":578,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":554,"title":{},"body":{"index.html":{}}}],["project",{"_index":588,"title":{},"body":{"index.html":{}}}],["promise",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["properties",{"_index":172,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["query",{"_index":298,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["query(undefined",{"_index":396,"title":{},"body":{"classes/TasksResolver.html":{}}}],["query(validationpipe",{"_index":370,"title":{},"body":{"controllers/TasksController.html":{}}}],["query.andwhere",{"_index":301,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.andwhere('status",{"_index":300,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.getmany",{"_index":305,"title":{},"body":{"classes/TaskRepository.html":{}}}],["read",{"_index":598,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":311,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["reflect",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["registerenumtype",{"_index":275,"title":{},"body":{"classes/TaskEntity.html":{}}}],["registerenumtype(taskstatus",{"_index":276,"title":{},"body":{"classes/TaskEntity.html":{}}}],["reponse",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reponse.ts",{"_index":219,"title":{},"body":{"interfaces/JWTResponse.html":{},"coverage.html":{}}}],["repositories/task.repository",{"_index":240,"title":{},"body":{"modules/ModelsModule.html":{}}}],["repositories/user.repository",{"_index":241,"title":{},"body":{"modules/ModelsModule.html":{}}}],["repository",{"_index":281,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["request",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["resolver",{"_index":404,"title":{},"body":{"classes/TasksResolver.html":{}}}],["result",{"_index":28,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":435,"title":{},"body":{"injectables/TasksService.html":{}}}],["results",{"_index":30,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["rimraf",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":573,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":487,"title":{},"body":{"classes/UserRepository.html":{}}}],["scalable",{"_index":559,"title":{},"body":{"index.html":{}}}],["search",{"_index":197,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{}}}],["search.tolowercase",{"_index":304,"title":{},"body":{"classes/TaskRepository.html":{}}}],["secret",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{}}}],["secretorkey",{"_index":236,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["server",{"_index":518,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["side",{"_index":560,"title":{},"body":{"index.html":{}}}],["signin",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signincredentials",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{}}}],["signincredentials",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signoptions",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(signupcredentials",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signupcredentials",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signupcredentialsdto",{"_index":61,"title":{"classes/SignUpCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpCredentialsDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["single",{"_index":191,"title":{},"body":{"classes/GetTaskByIdDto.html":{},"coverage.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["sponsors",{"_index":591,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":551,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task",{"_index":545,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../typeorm.config.ts",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/api/api.module.ts",{"_index":20,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/api/auth/auth.controller.ts",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/api/auth/auth.controller.ts:17",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/auth/auth.controller.ts:28",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/auth/auth.module",{"_index":25,"title":{},"body":{"modules/ApiModule.html":{},"modules/TasksModule.html":{}}}],["src/api/auth/auth.module.ts",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/api/auth/auth.service.ts",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/api/auth/auth.service.ts:10",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/auth/auth.service.ts:16",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/auth/auth.service.ts:20",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/auth/auth.service.ts:34",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/auth/decorators/get",{"_index":496,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/api/auth/dto/sign",{"_index":243,"title":{},"body":{"classes/SignUpCredentialsDto.html":{},"coverage.html":{}}}],["src/api/auth/interfaces/jwt",{"_index":217,"title":{},"body":{"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"coverage.html":{}}}],["src/api/auth/jwt.strategy.ts",{"_index":220,"title":{},"body":{"injectables/JWTStrategy.html":{},"coverage.html":{}}}],["src/api/auth/jwt.strategy.ts:20",{"_index":224,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/api/auth/jwt.strategy.ts:9",{"_index":222,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/api/tasks/dto/create",{"_index":183,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/api/tasks/dto/get",{"_index":190,"title":{},"body":{"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["src/api/tasks/pipe/task",{"_index":307,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["src/api/tasks/tasks.controller.ts",{"_index":332,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/api/tasks/tasks.controller.ts:33",{"_index":338,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.controller.ts:38",{"_index":346,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.controller.ts:48",{"_index":344,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.controller.ts:54",{"_index":341,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.controller.ts:63",{"_index":349,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.module",{"_index":24,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/api/tasks/tasks.module.ts",{"_index":386,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/api/tasks/tasks.service.ts",{"_index":413,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/api/tasks/tasks.service.ts:11",{"_index":417,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:14",{"_index":422,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:20",{"_index":420,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:24",{"_index":423,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:30",{"_index":418,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:34",{"_index":419,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:41",{"_index":424,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app.module.ts",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/typeorm.config.ts",{"_index":505,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/graphql/graphql.module.ts",{"_index":213,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/graphql/tasks/args/create",{"_index":169,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"coverage.html":{}}}],["src/graphql/tasks/args/update",{"_index":439,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{},"coverage.html":{}}}],["src/graphql/tasks/tasks.module",{"_index":214,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/graphql/tasks/tasks.resolver.ts",{"_index":389,"title":{},"body":{"classes/TasksResolver.html":{},"coverage.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:13",{"_index":398,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:23",{"_index":397,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:28",{"_index":401,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:36",{"_index":394,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:9",{"_index":392,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/main.ts",{"_index":506,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/entities/task",{"_index":363,"title":{},"body":{"controllers/TasksController.html":{},"miscellaneous/enumerations.html":{}}}],["src/models/entities/task.entity",{"_index":362,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["src/models/entities/task.entity.ts",{"_index":256,"title":{},"body":{"classes/TaskEntity.html":{},"coverage.html":{}}}],["src/models/entities/task.entity.ts:14",{"_index":264,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/models/entities/task.entity.ts:18",{"_index":269,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/models/entities/task.entity.ts:22",{"_index":261,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/models/entities/task.entity.ts:30",{"_index":259,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/models/entities/user.entity.ts",{"_index":444,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/models/entities/user.entity.ts:14",{"_index":449,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/models/entities/user.entity.ts:17",{"_index":450,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/models/entities/user.entity.ts:20",{"_index":448,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/models/entities/user.entity.ts:28",{"_index":452,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/models/models.module",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["src/models/models.module.ts",{"_index":238,"title":{},"body":{"modules/ModelsModule.html":{}}}],["src/models/repositories/task.repository.ts",{"_index":280,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/models/repositories/task.repository.ts:15",{"_index":287,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/models/repositories/task.repository.ts:8",{"_index":285,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/models/repositories/user.repository.ts",{"_index":459,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/models/repositories/user.repository.ts:14",{"_index":464,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/models/repositories/user.repository.ts:28",{"_index":466,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/models/repositories/user.repository.ts:37",{"_index":463,"title":{},"body":{"classes/UserRepository.html":{}}}],["start",{"_index":574,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":577,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":579,"title":{},"body":{"index.html":{}}}],["started",{"_index":553,"title":{"index.html":{}},"body":{}}],["starter",{"_index":567,"title":{},"body":{"index.html":{}}}],["statements",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"coverage.html":{}}}],["status.enum",{"_index":205,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{}}}],["status.enum.ts",{"_index":546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["status.length",{"_index":328,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["stay",{"_index":601,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":227,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["string",{"_index":174,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["successfully",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":233,"title":{},"body":{"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["support",{"_index":592,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":612,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":170,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["task.args.dto",{"_index":408,"title":{},"body":{"classes/TasksResolver.html":{}}}],["task.args.dto.ts",{"_index":440,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{},"coverage.html":{}}}],["task.args.dto.ts:10",{"_index":443,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{}}}],["task.args.dto.ts:7",{"_index":442,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{}}}],["task.dto",{"_index":292,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":184,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"coverage.html":{}}}],["task.dto.ts:11",{"_index":186,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:2",{"_index":193,"title":{},"body":{"classes/GetTaskByIdDto.html":{}}}],["task.dto.ts:7",{"_index":187,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.save",{"_index":438,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.status",{"_index":437,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskentity",{"_index":255,"title":{"classes/TaskEntity.html":{}},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["taskentity(title",{"_index":296,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskmanagement",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taskrepository",{"_index":239,"title":{"classes/TaskRepository.html":{}},"body":{"modules/ModelsModule.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":195,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks.controller",{"_index":387,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":357,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["taskscontroller",{"_index":331,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksfilter",{"_index":288,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["tasksmodule",{"_index":13,"title":{"modules/TasksModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksresolver",{"_index":388,"title":{"classes/TasksResolver.html":{}},"body":{"classes/TasksResolver.html":{},"coverage.html":{}}}],["tasksservice",{"_index":356,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":201,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.done",{"_index":317,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.in_progress",{"_index":316,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.open",{"_index":277,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["taskstatusvalidationpipe",{"_index":306,"title":{"classes/TaskStatusValidationPipe.html":{}},"body":{"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["test",{"_index":582,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":585,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":584,"title":{},"body":{"index.html":{}}}],["tests",{"_index":581,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":590,"title":{},"body":{"index.html":{}}}],["this.allowedstatuses.includes(status",{"_index":330,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.authservice.signup(signupcredentials",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(signincredentials",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createquerybuilder",{"_index":299,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.description",{"_index":279,"title":{},"body":{"classes/TaskEntity.html":{}}}],["this.findone",{"_index":484,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.getaccesstoken(user",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettaskbyid(id",{"_index":436,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.hash",{"_index":457,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.hashpassword(password",{"_index":473,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.isvalidstatus(status",{"_index":325,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.jwtservice.sign(payload",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.save(task",{"_index":297,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.taskrepository.createtask(createtaskdto",{"_index":433,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.delete(id",{"_index":434,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.find",{"_index":430,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findone(id",{"_index":431,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findtasksbyfilter(tasksfilter",{"_index":429,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":369,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.tasksservice.deletetaskbyid(id",{"_index":378,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.getalltasks",{"_index":373,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.tasksservice.getfilteredtasks(tasksfilter",{"_index":372,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.tasksservice.gettaskbyid(id",{"_index":375,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.tasksservice.updatetaskstatus(id",{"_index":381,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.title",{"_index":278,"title":{},"body":{"classes/TaskEntity.html":{}}}],["this.username",{"_index":456,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.userrepository.findone",{"_index":237,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["this.userrepository.signup(signupcredentials",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.validateuserpassword",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["title",{"_index":173,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{}}}],["touch",{"_index":602,"title":{},"body":{"index.html":{}}}],["transform",{"_index":314,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transform(value",{"_index":321,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transformer",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"classes/GetTasksFilterDto.html":{},"miscellaneous/variables.html":{}}}],["true})@field(undefined)@isoptional()@isnotempty",{"_index":202,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["true})@isoptional()@isenum(taskstatus",{"_index":199,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["try",{"_index":475,"title":{},"body":{"classes/UserRepository.html":{}}}],["twitter",{"_index":608,"title":{},"body":{"index.html":{}}}],["type",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":273,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/ModelsModule.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":242,"title":{},"body":{"modules/ModelsModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":566,"title":{},"body":{"index.html":{}}}],["ui",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":230,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["undefined",{"_index":268,"title":{},"body":{"classes/TaskEntity.html":{}}}],["unique",{"_index":453,"title":{},"body":{"classes/UserEntity.html":{}}}],["unique(['username",{"_index":455,"title":{},"body":{"classes/UserEntity.html":{}}}],["unit",{"_index":580,"title":{},"body":{"index.html":{}}}],["up",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpCredentialsDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["updatetaskargs",{"_index":402,"title":{},"body":{"classes/TasksResolver.html":{}}}],["updatetaskargsdto",{"_index":400,"title":{"classes/UpdateTaskArgsDto.html":{}},"body":{"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"coverage.html":{}}}],["updatetaskstatus",{"_index":336,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(id",{"_index":347,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(updatetaskargs",{"_index":399,"title":{},"body":{"classes/TasksResolver.html":{}}}],["useguards",{"_index":355,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(authguard",{"_index":366,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes",{"_index":353,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes(validationpipe",{"_index":367,"title":{},"body":{"controllers/TasksController.html":{}}}],["user",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.save",{"_index":476,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":485,"title":{},"body":{"classes/UserRepository.html":{}}}],["userentity",{"_index":143,"title":{"classes/UserEntity.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity(username",{"_index":474,"title":{},"body":{"classes/UserRepository.html":{}}}],["username",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/SignUpCredentialsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":139,"title":{"classes/UserRepository.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["uuid",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":221,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["validate(payload",{"_index":223,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["validatepassword",{"_index":446,"title":{},"body":{"classes/UserEntity.html":{}}}],["validatepassword(password",{"_index":451,"title":{},"body":{"classes/UserEntity.html":{}}}],["validateuser",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(signincredentials",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserpassword",{"_index":461,"title":{},"body":{"classes/UserRepository.html":{}}}],["validateuserpassword(signincredentials",{"_index":465,"title":{},"body":{"classes/UserRepository.html":{}}}],["validation.pipe",{"_index":360,"title":{},"body":{"controllers/TasksController.html":{}}}],["validation.pipe.ts",{"_index":308,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:11",{"_index":322,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:21",{"_index":320,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:5",{"_index":318,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validationpipe",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["validator",{"_index":179,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{},"dependencies.html":{}}}],["value",{"_index":315,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.touppercase",{"_index":324,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["variable",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":621,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":575,"title":{},"body":{"index.html":{}}}],["website",{"_index":606,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":595,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nApiModule -->\n\nTasksModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/api.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksModule } from 'src/api/tasks/tasks.module';\nimport { AuthModule } from 'src/api/auth/auth.module';\n\n@Module({\n  imports: [TasksModule, AuthModule],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nAppModule -->\n\nGraphqlModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            GraphqlModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TypeOrmConfig } from './config/typeorm.config';\nimport { ApiModule } from './api/api.module';\nimport { GraphqlModule } from './graphql/graphql.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(TypeOrmConfig),\n    GraphQLModule.forRoot({\n      debug: true,\n      playground: true,\n      autoSchemaFile: true,\n    }),\n    ApiModule,\n    GraphqlModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInCredentials: SignUpCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')@ApiResponse({status: 200, description: 'The user has been successfully authorized and get jwttoken.'})\n                \n            \n\n            \n                \n                    Defined in src/api/auth/auth.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpCredentials: SignUpCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@ApiResponse({status: 201, description: 'The user has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in src/api/auth/auth.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, ValidationPipe, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignUpCredentialsDto } from './dto/sign-up-credentials.dto';\nimport { JWTResponse } from './interfaces/jwt-reponse';\nimport { ApiTags, ApiResponse } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('signup')\n  @ApiResponse({\n    status: 201,\n    description: 'The user has been successfully created.',\n  })\n  async signUp(\n    @Body(ValidationPipe) signUpCredentials: SignUpCredentialsDto,\n  ): Promise {\n    return this.authService.signUp(signUpCredentials);\n  }\n\n  @Post('signin')\n  @ApiResponse({\n    status: 200,\n    description: 'The user has been successfully authorized and get jwttoken.',\n  })\n  async signIn(\n    @Body(ValidationPipe) signInCredentials: SignUpCredentialsDto,\n  ): Promise {\n    return this.authService.validateUser(signInCredentials);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nModelsModule\n\nModelsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nModelsModule->AuthModule\n\n\n\n\n\nJWTStrategy \n\nJWTStrategy \n\nJWTStrategy  -->\n\nAuthModule->JWTStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JWTStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ModelsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JWTStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JWTStrategy } from './jwt.strategy';\nimport { ModelsModule } from 'src/models/models.module';\n\n@Module({\n  imports: [\n    ModelsModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      secret: 'secret',\n      signOptions: {\n        expiresIn: '60s',\n      },\n    }),\n  ],\n  providers: [AuthService, JWTStrategy],\n  exports: [JWTStrategy, PassportModule],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getAccessToken\n                            \n                            \n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/api/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccessToken(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/api/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JWTResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(signUpCredentials: SignUpCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(signInCredentials: SignUpCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { UserRepository } from '../../models/repositories/user.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SignUpCredentialsDto } from './dto/sign-up-credentials.dto';\nimport { UserEntity } from '../../models/entities/user.entity';\nimport { JwtService } from '@nestjs/jwt';\nimport { JWTResponse } from './interfaces/jwt-reponse';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserRepository) private userRepository: UserRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  signUp(signUpCredentials: SignUpCredentialsDto): Promise {\n    return this.userRepository.signUp(signUpCredentials);\n  }\n\n  async validateUser(\n    signInCredentials: SignUpCredentialsDto,\n  ): Promise {\n    const user: UserEntity = await this.userRepository.validateUserPassword(\n      signInCredentials,\n    );\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return this.getAccessToken(user);\n  }\n\n  private getAccessToken(user: UserEntity): JWTResponse {\n    const { username } = user;\n    const payload: JWTPayload = { username };\n    const accessToken = this.jwtService.sign(payload);\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskArgsDto.html":{"url":"classes/CreateTaskArgsDto.html","title":"class - CreateTaskArgsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskArgsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/tasks/args/create-task-args.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/graphql/tasks/args/create-task-args.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/graphql/tasks/args/create-task-args.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { Field, ArgsType } from '@nestjs/graphql';\n\n@ArgsType()\nexport class CreateTaskArgsDto {\n  @Field()\n  @IsNotEmpty()\n  title: string;\n\n  @Field()\n  @IsNotEmpty()\n  description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/create-task.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/create-task.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateTaskDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTaskByIdDto.html":{"url":"classes/GetTaskByIdDto.html","title":"class - GetTaskByIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTaskByIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/dto/get-single-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/get-single-task.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetTaskByIdDto {\n  id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTasksFilterDto.html":{"url":"classes/GetTasksFilterDto.html","title":"class - GetTasksFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTasksFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/dto/get-tasks-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({nullable: true})@IsOptional()@IsEnum(TaskStatus)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/get-tasks-filter.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({nullable: true})@Field(undefined)@IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/get-tasks-filter.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TaskStatus } from '../../../models/entities/task-status.enum';\nimport { IsOptional, IsEnum, IsNotEmpty } from 'class-validator';\nimport { ArgsType, Field } from '@nestjs/graphql';\n\n@ArgsType()\nexport class GetTasksFilterDto {\n  @Field({ nullable: true })\n  @IsOptional()\n  @IsEnum(TaskStatus)\n  search: string;\n\n  @Field({ nullable: true })\n  @Field(type => TaskStatus)\n  @IsOptional()\n  @IsNotEmpty()\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GraphqlModule.html":{"url":"modules/GraphqlModule.html","title":"module - GraphqlModule","body":"\n                   \n\n\n\n\n    Modules\n    GraphqlModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GraphqlModule\n\n\n\ncluster_GraphqlModule_imports\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nGraphqlModule -->\n\nTasksModule->GraphqlModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/graphql/graphql.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksModule } from 'src/graphql/tasks/tasks.module';\n\n@Module({\n  imports: [TasksModule],\n})\nexport class GraphqlModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTPayload.html":{"url":"interfaces/JWTPayload.html","title":"interface - JWTPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JWTPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/interfaces/jwt-payload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface JWTPayload {\n  username: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTResponse.html":{"url":"interfaces/JWTResponse.html","title":"interface - JWTResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JWTResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/interfaces/jwt-reponse.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        accessToken\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JWTResponse {\n  accessToken: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTStrategy.html":{"url":"injectables/JWTStrategy.html","title":"injectable - JWTStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JWTStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/api/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JWTPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/api/auth/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserEntity } from '../../models/entities/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from '../../models/repositories/user.repository';\nimport { PassportStrategy, AuthGuard } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { UnauthorizedException, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JWTStrategy extends AuthGuard('jwt') {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'secret',\n    });\n  }\n\n  async validate(payload: JWTPayload): Promise {\n    const { username } = payload;\n    const user = await this.userRepository.findOne({ username });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ModelsModule.html":{"url":"modules/ModelsModule.html","title":"module - ModelsModule","body":"\n                   \n\n\n\n\n    Modules\n    ModelsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/models.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskRepository } from './repositories/task.repository';\nimport { UserRepository } from './repositories/user.repository';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TaskRepository, UserRepository])],\n  exports: [TypeOrmModule],\n})\nexport class ModelsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpCredentialsDto.html":{"url":"classes/SignUpCredentialsDto.html","title":"class - SignUpCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/dto/sign-up-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@MinLength(8)@MaxLength(50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/auth/dto/sign-up-credentials.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@MinLength(3)@MaxLength(50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/auth/dto/sign-up-credentials.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength, MaxLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SignUpCredentialsDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(50)\n  username: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(50)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskEntity.html":{"url":"classes/TaskEntity.html","title":"class - TaskEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/entities/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(title, description)\n                    \n                \n                        \n                            \n                                Defined in src/models/entities/task.entity.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        title\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/task.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/task.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column({type: 'enum', enum: TaskStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/task.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/task.entity.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\nimport { TaskStatus } from './task-status.enum';\nimport { ObjectType, Field, registerEnumType } from '@nestjs/graphql';\n\nregisterEnumType(TaskStatus, {\n  name: 'TaskStatus',\n});\n\n@ObjectType()\n@Entity()\nexport class TaskEntity extends BaseEntity {\n  @Field()\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field()\n  @Column()\n  title: string;\n\n  @Field()\n  @Column()\n  description: string;\n\n  @Field()\n  @Column({\n    type: 'enum',\n    enum: TaskStatus,\n    default: TaskStatus.OPEN,\n  })\n  status: TaskStatus;\n\n  constructor(title, description) {\n    super();\n    this.title = title;\n    this.description = description;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/repositories/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                findTasksByFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/task.repository.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findTasksByFilter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findTasksByFilter(tasksFilter: GetTasksFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/task.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilter\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Repository, EntityRepository } from 'typeorm';\nimport { TaskEntity } from '../entities/task.entity';\nimport { CreateTaskDto } from '../../api/tasks/dto/create-task.dto';\nimport { GetTasksFilterDto } from '../../api/tasks/dto/get-tasks-filter.dto';\n\n@EntityRepository(TaskEntity)\nexport class TaskRepository extends Repository {\n  async createTask(createTaskDto: CreateTaskDto): Promise {\n    const { title, description } = createTaskDto;\n    const task = new TaskEntity(title, description);\n    await this.save(task);\n    return task;\n  }\n\n  async findTasksByFilter(\n    tasksFilter: GetTasksFilterDto,\n  ): Promise {\n    const { status, search } = tasksFilter;\n\n    let tasks: TaskEntity[] = [];\n    const query = this.createQueryBuilder();\n\n    if (status) {\n      query.andWhere('status = :status', { status });\n    }\n\n    if (search) {\n      query.andWhere(\n        'LOWER(title) LIKE :search OR LOWER(description) LIKE :search',\n        { search: `%${search.toLowerCase()}%` },\n      );\n    }\n\n    tasks = await query.getMany();\n    return tasks;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskStatusValidationPipe.html":{"url":"classes/TaskStatusValidationPipe.html","title":"class - TaskStatusValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskStatusValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/pipe/task-status-validation.pipe.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            PipeTransform\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allowedStatuses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isValidStatus\n                            \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            allowedStatuses\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/pipe/task-status-validation.pipe.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isValidStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isValidStatus(status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/pipe/task-status-validation.pipe.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/pipe/task-status-validation.pipe.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PipeTransform, BadRequestException } from '@nestjs/common';\nimport { TaskStatus } from '../../../models/entities/task-status.enum';\n\nexport class TaskStatusValidationPipe implements PipeTransform {\n  readonly allowedStatuses = [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ];\n\n  transform(value: any) {\n    const status = value.toUpperCase();\n\n    if (!this.isValidStatus(status)) {\n      throw new BadRequestException(`${status} is invalid value of status`);\n    }\n\n    return status;\n  }\n\n  private isValidStatus(status: any) {\n    return status.length > 0 && this.allowedStatuses.includes(status);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTaskById\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTaskById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(tasksFilter: GetTasksFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilter\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(id: number, status: TaskStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Patch,\n  UsePipes,\n  ValidationPipe,\n  Query,\n  ParseIntPipe,\n  UseGuards,\n} from '@nestjs/common';\n\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { TaskStatusValidationPipe } from './pipe/task-status-validation.pipe';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskEntity } from 'src/models/entities/task.entity';\nimport { TaskStatus } from 'src/models/entities/task-status.enum';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\n\n@ApiTags('tasks')\n@Controller('tasks')\nexport class TasksController {\n  constructor(private tasksService: TasksService) {}\n\n  @Post()\n  @UseGuards(AuthGuard())\n  @UsePipes(ValidationPipe)\n  createTask(@Body() createTaskDto: CreateTaskDto) {\n    return this.tasksService.createTask(createTaskDto);\n  }\n\n  @Get()\n  getTasks(\n    @Query(ValidationPipe) tasksFilter: GetTasksFilterDto,\n  ): Promise {\n    if (Object.keys(tasksFilter).length) {\n      return this.tasksService.getFilteredTasks(tasksFilter);\n    }\n    return this.tasksService.getAllTasks();\n  }\n\n  @Get(':id')\n  getTaskById(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.tasksService.getTaskById(id);\n  }\n\n  @Delete(':id')\n  @UseGuards(AuthGuard())\n  deleteTaskById(\n    @Param('id', ParseIntPipe)\n    id: number,\n  ): Promise {\n    return this.tasksService.deleteTaskById(id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(AuthGuard())\n  updateTaskStatus(\n    @Param('id') id: number,\n    @Body('status', TaskStatusValidationPipe) status: TaskStatus,\n  ): Promise {\n    return this.tasksService.updateTaskStatus(id, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nModelsModule\n\nModelsModule\n\nTasksModule -->\n\nModelsModule->TasksModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ModelsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\nimport { AuthModule } from 'src/api/auth/auth.module';\nimport { ModelsModule } from 'src/models/models.module';\n\n@Module({\n  imports: [ModelsModule, AuthModule],\n  exports: [TasksService],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TasksResolver.html":{"url":"classes/TasksResolver.html","title":"class - TasksResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TasksResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/tasks/tasks.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                getTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tasksService: TasksService)\n                    \n                \n                        \n                            \n                                Defined in src/graphql/tasks/tasks.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tasksService\n                                                  \n                                                        \n                                                                        TasksService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskArgsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/tasks/tasks.resolver.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskArgsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTask\n                        \n                        \n                    \n                \n            \n            \n                \ngetTask(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/tasks/tasks.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(tasksFilter: GetTasksFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/tasks/tasks.resolver.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilter\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(updateTaskArgs: UpdateTaskArgsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/tasks/tasks.resolver.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateTaskArgs\n                                    \n                                                UpdateTaskArgsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TasksService } from '../../api/tasks/tasks.service';\nimport { Resolver, Query, Args, Mutation } from '@nestjs/graphql';\nimport { GetTasksFilterDto } from '../../api/tasks/dto/get-tasks-filter.dto';\nimport { UpdateTaskArgsDto } from './args/update-task.args.dto';\nimport { CreateTaskArgsDto } from './args/create-task-args.dto';\nimport { TaskEntity } from 'src/models/entities/task.entity';\n\n@Resolver(() => TaskEntity)\nexport class TasksResolver {\n  constructor(private tasksService: TasksService) {}\n\n  @Query(() => [TaskEntity])\n  async getTasks(\n    @Args() tasksFilter: GetTasksFilterDto,\n  ): Promise {\n    if (Object.keys(tasksFilter).length) {\n      return this.tasksService.getFilteredTasks(tasksFilter);\n    }\n    return this.tasksService.getAllTasks();\n  }\n\n  @Query(() => TaskEntity)\n  getTask(@Args('id') id: number): Promise {\n    return this.tasksService.getTaskById(id);\n  }\n\n  @Mutation(() => TaskEntity)\n  updateTaskStatus(\n    @Args() updateTaskArgs: UpdateTaskArgsDto,\n  ): Promise {\n    const { id, status } = updateTaskArgs;\n    return this.tasksService.updateTaskStatus(id, status);\n  }\n\n  @Mutation(() => TaskEntity)\n  createTask(@Args() createTaskDto: CreateTaskArgsDto): Promise {\n    return this.tasksService.createTask(createTaskDto);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTaskById\n                            \n                            \n                                getAllTasks\n                            \n                            \n                                    Async\n                                getFilteredTasks\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in src/api/tasks/tasks.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllTasks()\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFilteredTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFilteredTasks(tasksFilter: GetTasksFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilter\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskStatus(id: number, status: TaskStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, Inject } from '@nestjs/common';\n\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskEntity } from '../../models/entities/task.entity';\nimport { DeleteResult } from 'typeorm';\nimport { TaskStatus } from '../../models/entities/task-status.enum';\nimport { TaskRepository } from '../../models/repositories/task.repository';\n\n@Injectable()\nexport class TasksService {\n  constructor(private taskRepository: TaskRepository) {}\n\n  async getFilteredTasks(\n    tasksFilter: GetTasksFilterDto,\n  ): Promise {\n    return this.taskRepository.findTasksByFilter(tasksFilter);\n  }\n\n  getAllTasks(): Promise {\n    return this.taskRepository.find();\n  }\n\n  async getTaskById(id: number): Promise {\n    const found = await this.taskRepository.findOne(id);\n    if (!found) throw new NotFoundException(`Task with ID \"${id}\" not found`);\n    return found;\n  }\n\n  async createTask(createTaskDto: CreateTaskDto): Promise {\n    return this.taskRepository.createTask(createTaskDto);\n  }\n\n  async deleteTaskById(id: number): Promise {\n    const result: DeleteResult = await this.taskRepository.delete(id);\n    if (!result.affected) {\n      throw new NotFoundException(`Task with ID \"${id}\" not found`);\n    }\n  }\n\n  async updateTaskStatus(id: number, status: TaskStatus): Promise {\n    const task: TaskEntity = await this.getTaskById(id);\n    task.status = status;\n    await task.save();\n    return task;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskArgsDto.html":{"url":"classes/UpdateTaskArgsDto.html","title":"class - UpdateTaskArgsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskArgsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/tasks/args/update-task.args.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/graphql/tasks/args/update-task.args.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/graphql/tasks/args/update-task.args.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TaskStatus } from '../../../models/entities/task-status.enum';\nimport { ArgsType, Field, ID } from '@nestjs/graphql';\n\n@ArgsType()\nexport class UpdateTaskArgsDto {\n  @Field(() => ID)\n  id: number;\n\n  @Field(() => TaskStatus)\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hash\n                            \n                            \n                                id\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(username, password)\n                    \n                \n                        \n                            \n                                Defined in src/models/entities/user.entity.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password)\n                \n            \n\n\n            \n                \n                    Defined in src/models/entities/user.entity.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Unique,\n} from 'typeorm';\nimport * as bcrypt from 'bcrypt';\n\n@Entity()\n@Unique(['username'])\nexport class UserEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  username: string;\n\n  @Column()\n  hash: string;\n\n  constructor(username, password) {\n    super();\n    this.username = username;\n    this.hash = password;\n  }\n\n  async validatePassword(password): Promise {\n    const { hash } = this;\n    const result = await bcrypt.compare(password, hash);\n    return result;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/repositories/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/user.repository.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpCredentials: SignUpCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/user.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(signInCredentials: SignUpCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/user.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt/bcrypt.js';\n\nimport {\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\n\nimport { UserEntity } from '../entities/user.entity';\nimport { Repository, EntityRepository } from 'typeorm';\nimport { SignUpCredentialsDto } from '../../api/auth/dto/sign-up-credentials.dto';\n\n@EntityRepository(UserEntity)\nexport class UserRepository extends Repository {\n  async signUp(signUpCredentials: SignUpCredentialsDto): Promise {\n    const { username, password } = signUpCredentials;\n    const hash = await this.hashPassword(password);\n    const user = new UserEntity(username, hash);\n    try {\n      await user.save();\n    } catch (error) {\n      if (error.code == 23505) {\n        throw new ConflictException('This user already exist');\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async validateUserPassword(signInCredentials: SignUpCredentialsDto) {\n    const { username, password } = signInCredentials;\n    const user: UserEntity = await this.findOne({ username });\n    if (user && (await user.validatePassword(password))) {\n      return user;\n    }\n    return null;\n  }\n\n  private async hashPassword(password: string) {\n    const salt = await bcrypt.genSalt();\n    const hash = await bcrypt.hash(password, salt);\n    return hash;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/api/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/api/auth/decorators/get-user-entity.decorator.ts\n            \n            variable\n            GetUserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/api/auth/dto/sign-up-credentials.dto.ts\n            \n            class\n            SignUpCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/auth/interfaces/jwt-payload.ts\n            \n            interface\n            JWTPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/auth/interfaces/jwt-reponse.ts\n            \n            interface\n            JWTResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/auth/jwt.strategy.ts\n            \n            injectable\n            JWTStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/tasks/dto/get-single-task.dto.ts\n            \n            class\n            GetTaskByIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/tasks/dto/get-tasks-filter.dto.ts\n            \n            class\n            GetTasksFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/tasks/pipe/task-status-validation.pipe.ts\n            \n            class\n            TaskStatusValidationPipe\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            TypeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/graphql/tasks/args/create-task-args.dto.ts\n            \n            class\n            CreateTaskArgsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/graphql/tasks/args/update-task.args.dto.ts\n            \n            class\n            UpdateTaskArgsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/graphql/tasks/tasks.resolver.ts\n            \n            class\n            TasksResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/entities/task.entity.ts\n            \n            class\n            TaskEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/models/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/models/repositories/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/models/repositories/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/graphql : ^7.2.0\n        \n            @nestjs/jwt : ^7.0.0\n        \n            @nestjs/passport : ^7.0.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.5.1\n        \n            @nestjs/typeorm : ^7.0.0\n        \n            apollo-server-express : ^2.11.0\n        \n            bcrypt : ^4.0.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.1\n        \n            graphql : 14.6.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.24\n        \n            uuid : ^7.0.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../task-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/entities/task-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GraphqlModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModelsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nJWTStrategy \n\nJWTStrategy \n\nJWTStrategy  -->\n\nAuthModule->JWTStrategy \n\n\n\nApiModule -->\n\nTasksModule->ApiModule\n\n\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nGraphqlModule -->\n\nTasksModule->GraphqlModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\nAppModule -->\n\nGraphqlModule->AppModule\n\n\n\n\n\nModelsModule\n\nModelsModule\n\nAuthModule -->\n\nModelsModule->AuthModule\n\n\n\nTasksModule -->\n\nModelsModule->TasksModule\n\n\n\nTasksModule -->\n\nModelsModule->TasksModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUserEntity   (src/.../get-user-entity.decorator.ts)\n                        \n                        \n                            TypeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/api/auth/decorators/get-user-entity.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUserEntity\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (_, context): UserEntity => {\n    const request = context.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TypeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'postgres',\n  password: 'postgres',\n  database: 'taskmanagement',\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: true,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
