var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/ApiModule.html",[0,0.951,1,1.876]],["body/modules/ApiModule.html",[0,1.581,1,3.621,2,1.512,3,1.644,4,1.962,5,1.962,6,1.644,7,1.962,8,1.793,9,3.096,10,3.096,11,3.186,12,0.03,13,2.91,14,2.55,15,1.962,16,1.962,17,0.341,18,0.296,19,0.296,20,3.701,21,2.55,22,0.707,23,1.011,24,3.701,25,3.096,26,0.389,27,0.106,28,0.018,29,0.023,30,0.018]],["title/modules/AppModule.html",[0,0.951,31,2.082]],["body/modules/AppModule.html",[0,1.478,1,3.375,2,1.321,3,1.436,4,1.714,5,1.714,6,1.436,7,1.714,8,1.565,12,0.031,13,1.565,14,2.33,15,1.714,16,1.714,17,0.298,18,0.258,19,0.258,21,2.33,22,0.783,23,0.883,26,0.339,27,0.092,28,0.015,29,0.021,30,0.015,31,3.901,32,2.703,33,2.703,34,3.453,35,3.232,36,1.565,37,3.232,38,2.703,39,1.887,40,2.355,41,3.232,42,3.232,43,3.232,44,3.232,45,3.232,46,3.232,47,3.639,48,3.232,49,3.232]],["title/controllers/AuthController.html",[50,1.876,51,2.082]],["body/controllers/AuthController.html",[12,0.031,17,0.244,18,0.211,19,0.211,22,0.689,23,0.723,26,0.278,27,0.076,28,0.013,29,0.018,30,0.013,50,1.544,51,2.475,52,1.544,53,2.213,54,2.213,55,2.646,56,0.313,57,1.438,58,2.409,59,4.483,60,3.266,61,2.646,62,2.965,63,1.438,64,2.646,65,3.82,66,2.602,67,2.602,68,4.909,69,3.82,70,3.82,71,0.813,72,2.646,73,1.327,74,1.327,75,0.561,76,1.327,77,2.783,78,1.438,79,2.005,80,1.928,81,2.646,82,3.82,83,3.82,84,2.646,85,2.783,86,2.213,87,2.213,88,2.213,89,2.377,90,2.213,91,2.213,92,1.544,93,1.928,94,1.544,95,2.213,96,2.213,97,2.213,98,4.483,99,1.544,100,2.646,101,2.646,102,1.714,103,2.646,104,1.438,105,3.82,106,1.327,107,2.646,108,2.646,109,2.646]],["title/modules/AuthModule.html",[0,0.951,11,1.704]],["body/modules/AuthModule.html",[0,1.393,2,1.18,3,1.283,4,1.532,5,1.532,6,1.283,7,2.495,8,2.279,11,3.235,12,0.031,14,2.156,15,1.532,16,1.532,17,0.266,18,0.231,19,0.231,21,2.156,22,0.759,23,0.789,26,0.303,27,0.083,28,0.014,29,0.019,30,0.014,51,3.05,52,2.374,89,2.961,90,2.416,110,2.416,111,2.416,112,2.416,113,2.416,114,2.961,115,3.595,116,2.889,117,2.889,118,2.889,119,2.105,120,4.067,121,1.872,122,2.889,123,2.416,124,2.889,125,2.889,126,2.105,127,2.889,128,3.401,129,2.889,130,2.889,131,2.889]],["title/injectables/AuthService.html",[89,1.704,132,1.556]],["body/injectables/AuthService.html",[12,0.031,17,0.214,18,0.185,19,0.185,22,0.71,23,0.634,26,0.244,27,0.066,28,0.011,29,0.016,30,0.011,39,1.355,56,0.275,57,1.307,58,1.846,60,2.528,62,2.845,67,2.444,71,0.981,73,1.601,74,1.601,75,0.677,76,1.601,77,3.027,78,1.565,79,1.884,80,2.528,85,1.692,89,1.84,91,1.942,92,1.355,93,1.692,94,2.426,95,1.942,96,1.942,106,1.443,119,1.692,132,1.681,133,1.505,134,1.942,135,3.198,136,3.471,137,4.156,138,1.84,139,1.942,140,2.745,141,5.366,142,2.322,143,3.471,144,2.39,145,2.322,146,2.322,147,2.322,148,2.322,149,1.942,150,1.942,151,1.942,152,1.942,153,1.942,154,2.322,155,1.884,156,1.231,157,2.322,158,1.355,159,1.125,160,2.322,161,1.942,162,2.322,163,1.681,164,1.942,165,1.355,166,2.903,167,2.322]],["title/classes/CreateTaskArgsDto.html",[27,0.092,168,2.082]],["body/classes/CreateTaskArgsDto.html",[12,0.03,17,0.34,18,0.294,19,0.294,22,0.634,26,0.387,27,0.137,28,0.017,29,0.023,30,0.017,36,1.784,56,0.436,63,1.806,66,2.827,71,1.021,75,0.704,168,3.108,169,1.091,170,4.459,171,2.827,172,3.082,173,1.666,174,3.455,175,2.126,176,4.796,177,3.685,178,3.685,179,3.455,180,2.151,181,3.455,182,3.494]],["title/classes/CreateTaskDto.html",[27,0.092,183,1.556]],["body/classes/CreateTaskDto.html",[12,0.031,17,0.347,18,0.301,19,0.301,22,0.644,26,0.396,27,0.139,28,0.018,29,0.023,30,0.018,56,0.446,63,1.832,66,2.858,71,1.036,75,0.715,99,2.2,169,1.116,173,1.691,174,3.493,175,2.145,179,3.493,180,2.2,183,2.357,184,4.508,185,2.746,186,4.867,187,3.77,188,3.77,189,4.508]],["title/classes/GetTaskByIdDto.html",[27,0.092,190,2.341]],["body/classes/GetTaskByIdDto.html",[12,0.029,17,0.401,18,0.348,19,0.348,26,0.457,27,0.124,28,0.021,29,0.025,30,0.021,56,0.515,71,0.926,75,0.639,169,1.288,173,1.851,175,2.006,185,3.171,190,3.881,191,3.881,192,4.456,193,2.788,194,4.352]],["title/classes/GetTasksFilterDto.html",[27,0.092,195,1.556]],["body/classes/GetTasksFilterDto.html",[12,0.031,17,0.31,18,0.269,19,0.269,22,0.674,26,0.353,27,0.129,28,0.016,29,0.021,30,0.016,36,1.63,47,3.291,56,0.398,63,1.701,71,0.961,75,0.663,104,1.92,169,0.996,173,1.569,175,1.701,179,2.927,180,1.965,181,3.304,182,3.291,191,3.714,195,2.188,196,2.703,197,2.815,198,4.264,199,4.517,200,3.366,201,3.366,202,2.639,203,3.366,204,3.366,205,2.181,206,1.784,207,5.099,208,3.366,209,4.517,210,3.366,211,3.366]],["title/modules/GraphqlModule.html",[0,0.951,34,1.876]],["body/modules/GraphqlModule.html",[0,1.628,2,1.607,3,1.747,4,2.085,5,2.085,6,1.747,7,2.085,8,1.905,12,0.03,13,2.958,14,2.651,15,2.085,16,2.085,17,0.363,18,0.314,19,0.314,21,2.651,22,0.662,23,1.074,26,0.413,27,0.112,28,0.019,29,0.024,30,0.019,34,3.565,212,3.933,213,3.933,214,3.933,215,3.933]],["title/interfaces/JWTPayload.html",[165,1.876,216,1.876]],["body/interfaces/JWTPayload.html",[12,0.029,17,0.41,18,0.355,19,0.355,28,0.021,29,0.026,30,0.021,56,0.526,75,0.653,163,2.927,165,3.151,173,1.875,175,2.188,216,2.596,217,3.24,218,3.24,219,3.719]],["title/interfaces/JWTResponse.html",[94,1.876,216,1.876]],["body/interfaces/JWTResponse.html",[12,0.029,17,0.408,18,0.353,19,0.353,26,0.464,28,0.021,29,0.026,30,0.021,56,0.523,75,0.65,94,3.14,166,5.046,173,1.869,175,2.183,216,2.582,217,3.222,218,3.222,220,3.699]],["title/injectables/JWTStrategy.html",[115,1.876,132,1.556]],["body/injectables/JWTStrategy.html",[12,0.031,17,0.266,18,0.231,19,0.231,22,0.739,23,0.789,26,0.303,27,0.083,28,0.014,29,0.019,30,0.014,39,1.686,56,0.342,57,1.531,58,2.091,67,2.495,71,0.866,73,1.413,74,1.413,75,0.597,76,1.413,78,1.088,79,1.662,106,1.004,115,2.374,121,1.872,126,2.105,128,2.416,132,1.97,133,1.872,135,1.872,138,2.156,139,2.416,140,2.961,144,1.399,150,2.416,151,2.416,152,2.416,153,2.416,155,1.662,156,1.532,158,1.686,159,1.399,163,1.97,164,3.401,165,2.747,221,2.416,222,4.067,223,2.889,224,4.067,225,2.889,226,2.889,227,2.416,228,2.889,229,2.889,230,2.416,231,4.067,232,1.686,233,2.889,234,2.105,235,2.889,236,2.889,237,2.889,238,2.889]],["title/modules/ModelsModule.html",[0,0.951,114,1.704]],["body/modules/ModelsModule.html",[0,1.527,2,1.688,8,2.001,12,0.031,17,0.381,18,0.33,19,0.33,21,2.191,22,0.779,23,1.128,26,0.434,27,0.118,28,0.02,29,0.024,30,0.02,38,4.315,39,2.412,114,2.735,140,2.735,239,4.132,240,2.412,241,4.132,242,4.132,243,4.132]],["title/classes/SignUpCredentialsDto.html",[27,0.092,62,1.704]],["body/classes/SignUpCredentialsDto.html",[12,0.03,17,0.334,18,0.289,19,0.289,22,0.627,26,0.38,27,0.136,28,0.017,29,0.023,30,0.017,56,0.428,62,2.513,63,1.785,71,1.009,75,0.696,92,3.085,99,2.113,163,2.56,169,1.071,173,1.646,175,2.111,179,3.425,180,2.113,189,4.42,244,4.42,245,3.027,246,3.425,247,3.619,248,3.619,249,3.619,250,3.619,251,3.619,252,3.619,253,3.619,254,4.74,255,3.619]],["title/classes/TaskEntity.html",[27,0.092,256,1.556]],["body/classes/TaskEntity.html",[12,0.031,17,0.253,18,0.219,19,0.219,22,0.605,26,0.288,27,0.078,28,0.013,29,0.019,30,0.013,36,1.329,56,0.325,63,1.879,66,2.997,71,1.124,73,0.953,74,1.362,75,0.775,76,0.953,104,1.722,138,1.455,169,0.812,171,1.455,173,1.362,174,3.421,175,1.879,181,3.421,193,2.417,202,2.659,206,1.455,232,2.288,234,1.999,256,1.899,257,2.295,258,3.826,259,3.921,260,3.921,261,3.921,262,2.744,263,2.079,264,2.744,265,2.744,266,2.744,267,4.991,268,2.856,269,2.744,270,2.744,271,3.279,272,3.279,273,4.174,274,1.455,275,3.921,276,2.744,277,2.744,278,2.295,279,2.744,280,2.744]],["title/classes/TaskRepository.html",[27,0.092,240,1.876]],["body/classes/TaskRepository.html",[12,0.031,17,0.24,18,0.208,19,0.208,22,0.644,26,0.273,27,0.074,28,0.012,29,0.018,30,0.012,56,0.308,57,1.421,58,2.396,66,2.002,71,0.803,73,1.311,74,1.311,75,0.554,76,1.311,78,1.421,79,1.991,104,1.834,106,1.311,155,1.991,156,2.002,159,1.261,169,0.771,171,2.002,174,1.687,183,2.612,195,2.36,196,2.583,198,4.326,232,2.204,240,2.204,256,1.829,274,1.38,281,2.178,282,3.236,283,2.447,284,4.442,285,2.447,286,2.604,287,2.604,288,2.604,289,2.878,290,2.178,291,2.604,292,2.604,293,1.897,294,2.178,295,1.687,296,2.604,297,2.604,298,2.604,299,1.897,300,2.604,301,2.604,302,2.604,303,2.604,304,2.604,305,2.604,306,2.604]],["title/classes/TaskStatusValidationPipe.html",[27,0.092,307,2.082]],["body/classes/TaskStatusValidationPipe.html",[12,0.031,17,0.267,18,0.232,19,0.232,22,0.539,23,0.792,26,0.304,27,0.083,28,0.014,29,0.019,30,0.014,56,0.343,57,1.535,71,1.004,73,1.416,74,1.416,75,0.693,76,1.416,78,1.535,104,2.208,106,1.416,135,3.056,155,1.185,158,1.692,159,1.404,169,0.858,173,1.416,202,1.404,205,1.879,206,1.537,268,2.112,278,3.41,307,2.642,308,4.279,309,2.425,310,4.077,311,4.716,312,4.716,313,4.716,314,4.077,315,4.077,316,3.435,317,4.077,318,4.077,319,2.9,320,4.077,321,2.9,322,4.077,323,2.9,324,2.9,325,2.9,326,2.9,327,2.9,328,2.9,329,2.9,330,2.425,331,2.9]],["title/controllers/TasksController.html",[50,1.876,332,2.082]],["body/controllers/TasksController.html",[12,0.031,17,0.186,18,0.161,19,0.161,22,0.716,23,0.55,26,0.211,27,0.058,28,0.01,29,0.015,30,0.01,50,1.175,52,1.175,54,1.684,56,0.238,57,1.172,63,1.744,71,0.986,73,1.609,74,1.609,75,0.68,76,1.609,78,1.744,79,2.156,86,1.684,87,1.684,88,2.604,97,1.684,99,1.175,102,1.304,104,1.744,106,1.701,121,1.304,183,2.372,193,2.372,195,2.075,196,1.651,202,2.075,206,1.067,227,1.684,256,0.975,263,2.871,283,2.017,285,1.304,289,2.017,293,1.467,295,1.304,299,1.467,307,2.017,332,2.017,333,1.684,334,3.184,335,2.604,336,3.184,337,2.773,338,2.013,339,2.013,340,1.684,341,2.013,342,2.013,343,1.684,344,3.113,345,2.013,346,1.684,347,2.013,348,1.684,349,2.013,350,2.013,351,2.013,352,2.013,353,2.013,354,2.013,355,3.807,356,2.013,357,1.844,358,1.684,359,1.684,360,2.013,361,2.013,362,1.684,363,1.684,364,1.684,365,2.013,366,2.013,367,3.807,368,2.013,369,2.013,370,1.684,371,2.013,372,1.684,373,1.684,374,1.684,375,2.013,376,1.684,377,2.013,378,3.113,379,2.013,380,2.013,381,2.013,382,1.684]],["title/modules/TasksModule.html",[0,0.951,13,1.556]],["body/modules/TasksModule.html",[0,1.466,2,1.3,3,1.413,4,1.687,5,1.687,6,1.413,7,2.626,8,2.399,11,3.051,12,0.031,13,3.009,14,2.305,15,1.687,16,1.687,17,0.293,18,0.254,19,0.254,21,2.305,22,0.737,23,0.869,25,2.661,26,0.334,27,0.091,28,0.015,29,0.021,30,0.015,52,2.538,114,3.051,123,2.661,332,3.21,357,3.033,358,2.661,383,2.661,384,3.182,385,2.661,386,2.661,387,3.182,388,3.182]],["title/classes/TasksResolver.html",[27,0.092,389,2.341]],["body/classes/TasksResolver.html",[12,0.031,17,0.203,18,0.175,19,0.175,22,0.671,26,0.231,27,0.063,28,0.01,29,0.016,30,0.01,36,1.064,56,0.26,57,1.253,58,1.785,63,1.688,71,1.025,73,1.674,74,1.674,75,0.708,76,1.674,78,1.688,79,2.216,102,1.424,104,1.253,106,1.674,138,1.165,155,0.898,168,2.906,169,0.65,171,1.165,183,1.612,193,1.947,195,2.172,196,1.165,256,2.456,263,2.131,283,2.157,285,1.424,289,2.157,294,1.838,295,1.424,299,2.928,336,3.361,337,2.928,346,1.838,357,2.456,363,1.838,370,1.838,372,1.838,373,1.838,374,1.838,376,1.838,382,1.838,389,2.425,390,1.838,391,3.329,392,2.197,393,2.197,394,3.329,395,2.197,396,2.197,397,3.329,398,2.197,399,2.197,400,2.197,401,2.906,402,2.197,403,4.019,404,2.197,405,3.329,406,4.019,407,4.019,408,2.197,409,2.197,410,2.197,411,2.197,412,2.197,413,2.197]],["title/injectables/TasksService.html",[132,1.556,357,1.556]],["body/injectables/TasksService.html",[12,0.031,17,0.179,18,0.155,19,0.155,22,0.667,23,0.53,26,0.204,27,0.056,28,0.014,29,0.014,30,0.009,56,0.23,57,1.14,58,2.609,71,1.072,73,1.676,74,1.676,75,0.709,76,1.676,78,1.817,79,2.316,102,1.258,104,1.582,106,1.582,132,1.466,133,1.258,138,1.029,149,1.624,155,1.52,156,2.227,158,1.767,159,1.466,161,3.809,171,1.605,183,2.206,193,2.441,195,2.035,196,1.029,202,2.035,205,1.258,206,1.029,240,2.817,256,1.466,263,2.84,274,1.029,283,1.961,285,1.961,289,1.961,293,1.414,295,1.258,334,2.531,335,2.531,337,2.205,340,2.531,343,2.531,348,2.531,357,1.466,359,1.624,362,1.624,414,1.624,415,4.201,416,3.72,417,1.941,418,1.941,419,1.941,420,1.941,421,1.941,422,1.941,423,1.941,424,1.941,425,1.941,426,1.941,427,1.941,428,3.027,429,1.941,430,1.941,431,1.941,432,1.941,433,3.027,434,1.941,435,1.941,436,1.941,437,1.941,438,1.941,439,1.941]],["title/classes/UpdateTaskArgsDto.html",[27,0.092,401,2.082]],["body/classes/UpdateTaskArgsDto.html",[12,0.031,17,0.34,18,0.294,19,0.294,22,0.634,26,0.387,27,0.105,28,0.017,29,0.023,30,0.017,36,1.784,56,0.436,63,1.806,71,1.021,75,0.704,104,2.007,169,1.091,173,1.666,181,3.455,182,3.494,193,2.836,202,2.735,205,2.388,206,1.953,263,2.542,401,3.108,440,4.459,441,3.082,442,4.796,443,3.685,444,3.685]],["title/classes/UserEntity.html",[27,0.092,144,1.556]],["body/classes/UserEntity.html",[12,0.031,17,0.26,18,0.225,19,0.225,22,0.529,26,0.296,27,0.081,28,0.022,29,0.019,30,0.013,56,0.334,57,1.505,58,2.063,63,1.748,71,1.135,73,1.388,74,1.388,75,0.682,76,1.388,78,1.062,79,1.633,106,0.979,138,1.495,144,1.936,155,1.633,156,1.495,163,2.584,169,0.834,173,1.388,175,1.902,193,2.249,232,2.333,234,2.054,246,3.457,258,3.884,263,2.119,271,3.343,272,3.884,273,4.462,274,1.495,445,2.358,446,4.462,447,3.997,448,3.997,449,3.997,450,2.819,451,2.819,452,3.997,453,2.819,454,2.819,455,2.912,456,2.819,457,2.819,458,2.819,459,2.819]],["title/classes/UserRepository.html",[27,0.092,140,1.704]],["body/classes/UserRepository.html",[12,0.031,17,0.209,18,0.181,19,0.181,22,0.647,23,0.62,26,0.238,27,0.065,28,0.011,29,0.016,30,0.011,56,0.269,57,1.285,58,2.49,60,2.486,62,2.824,67,2.591,71,0.873,73,1.424,74,1.424,75,0.602,76,1.424,77,2.486,78,1.544,79,1.394,80,2.486,85,2.486,92,1.325,93,1.654,106,1.424,135,2.657,140,1.809,144,1.653,155,2.176,156,2.722,158,1.992,159,1.986,163,1.986,169,0.672,175,1.544,232,1.992,246,2.657,274,1.204,282,2.987,290,1.899,446,3.813,455,1.654,460,1.899,461,3.413,462,3.413,463,3.413,464,2.271,465,2.271,466,3.413,467,2.271,468,2.271,469,2.271,470,3.413,471,2.271,472,2.271,473,2.271,474,2.271,475,2.271,476,2.271,477,2.271,478,2.271,479,2.271,480,2.271,481,2.271,482,2.271,483,2.271,484,2.271,485,2.271,486,2.271,487,2.271,488,3.413,489,2.271,490,2.271]],["title/coverage.html",[491,3.189]],["body/coverage.html",[6,1.142,12,0.03,19,0.205,27,0.172,28,0.012,29,0.018,30,0.012,40,1.873,50,2.184,51,1.666,53,2.15,62,1.363,67,1.363,75,0.378,89,1.363,92,1.501,94,1.501,104,0.968,115,1.501,132,2.136,134,2.15,140,1.363,144,1.245,159,1.245,165,1.501,168,1.666,170,2.15,171,1.363,172,2.15,183,1.245,184,2.15,185,2.725,190,1.873,191,2.725,192,2.15,195,1.245,196,1.363,197,2.15,216,2.184,218,2.725,219,2.15,220,2.15,221,2.15,240,1.501,244,2.15,245,2.15,256,1.245,257,2.15,281,2.15,307,1.666,308,2.15,309,2.15,330,5.337,332,1.666,333,2.15,357,1.245,389,1.873,390,2.15,401,1.666,414,2.15,440,2.15,441,2.15,445,2.15,460,2.15,491,1.873,492,2.571,493,2.571,494,2.571,495,5.68,496,2.571,497,2.15,498,2.15,499,3.741,500,2.15,501,4.41,502,4.41,503,3.741,504,4.843,505,2.571,506,2.15,507,2.15,508,2.571,509,2.571,510,2.571]],["title/dependencies.html",[3,1.716,511,2.687]],["body/dependencies.html",[3,1.533,12,0.031,23,0.942,27,0.131,28,0.016,29,0.022,30,0.016,36,1.671,39,2.014,99,2.014,119,2.514,121,2.236,126,2.514,180,2.014,230,3.842,274,1.83,455,2.514,512,5.894,513,3.451,514,3.451,515,3.451,516,5.163,517,3.451,518,3.451,519,2.886,520,3.451,521,3.451,522,3.451,523,3.451,524,3.451,525,3.451,526,3.451,527,3.451,528,3.451,529,3.451,530,3.451,531,3.451,532,3.451,533,3.451,534,3.451,535,3.451,536,3.451,537,3.451,538,3.451,539,3.451,540,3.451,541,3.451,542,3.451,543,3.451]],["title/miscellaneous/enumerations.html",[544,1.425,545,3.231]],["body/miscellaneous/enumerations.html",[12,0.029,28,0.021,29,0.026,30,0.021,56,0.532,202,2.632,316,4.254,364,3.76,544,2.384,545,3.76,546,4.496,547,5.434,548,4.545,549,5.434,550,5.434]],["title/miscellaneous/functions.html",[544,1.425,551,3.231]],["body/miscellaneous/functions.html",[6,2.677,12,0.027,28,0.023,29,0.027,30,0.023,56,0.573,507,4.05,544,2.568,551,4.05,552,4.843]],["title/index.html",[56,0.318,553,2.687,554,2.687]],["body/index.html",[12,0.03,18,0.255,28,0.015,29,0.021,30,0.015,66,1.694,282,2.327,491,2.327,519,2.672,548,2.672,555,3.195,556,3.195,557,4.36,558,3.195,559,3.195,560,3.195,561,3.195,562,3.195,563,3.195,564,3.195,565,3.195,566,4.964,567,3.195,568,3.195,569,3.195,570,5.898,571,3.195,572,3.195,573,3.195,574,5.762,575,3.195,576,3.195,577,4.36,578,3.195,579,3.195,580,3.195,581,3.195,582,4.36,583,4.36,584,3.195,585,3.195,586,3.195,587,4.36,588,4.36,589,3.195,590,3.195,591,3.195,592,3.195,593,2.672,594,3.195,595,3.195,596,3.195,597,3.195,598,3.195,599,3.195,600,3.195,601,3.195,602,3.195,603,3.195,604,3.195,605,3.195,606,3.195,607,3.195,608,3.195,609,3.195,610,3.195,611,3.195]],["title/modules.html",[2,1.789]],["body/modules.html",[1,2.437,2,1.706,11,2.213,12,0.025,13,2.515,28,0.02,29,0.025,30,0.02,31,2.705,34,2.437,114,2.213,593,5.185,612,6.2,613,6.2,614,6.287,615,4.174,616,4.174]],["title/overview.html",[617,3.661]],["body/overview.html",[0,0.877,1,3.373,2,1.21,3,1.316,4,1.571,5,1.571,6,1.316,7,1.571,8,1.435,9,2.478,10,2.478,11,3.251,12,0.03,13,3.057,14,2.194,15,1.571,16,1.571,28,0.014,29,0.02,30,0.014,31,3.648,32,2.478,33,2.478,34,3.172,52,1.729,89,2.529,110,2.478,111,2.478,112,2.478,113,2.478,114,2.881,115,3.373,133,1.92,169,0.877,217,2.158,357,2.855,383,2.478,385,2.478,386,2.478,617,2.478,618,2.963,619,4.139,620,2.963,621,2.963]],["title/miscellaneous/variables.html",[544,1.425,622,3.231]],["body/miscellaneous/variables.html",[12,0.031,28,0.018,29,0.023,30,0.018,40,3.525,47,2.721,56,0.442,67,2.565,75,0.711,106,1.297,144,1.809,155,1.526,163,1.809,246,2.42,268,3.525,316,3.525,497,3.124,498,4.046,500,4.046,506,3.124,544,1.98,622,3.124,623,3.735,624,3.735,625,3.735,626,3.735,627,3.735,628,3.735,629,3.735,630,3.735,631,3.735,632,5.367,633,3.735,634,3.735,635,3.735,636,3.735,637,3.735,638,3.735,639,3.735,640,3.735,641,3.735,642,3.735]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":330,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["0.1.13",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["0.11.1",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["0.2.24",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":621,"title":{},"body":{"overview.html":{}}}],["14.6.0",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":619,"title":{},"body":{"overview.html":{}}}],["2.11.0",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["23505",{"_index":481,"title":{},"body":{"classes/UserRepository.html":{}}}],["3",{"_index":620,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.5.4",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":618,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTResponse.html":{}}}],["allowedstatuses",{"_index":313,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["already",{"_index":483,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":594,"title":{},"body":{"index.html":{}}}],["angular",{"_index":565,"title":{},"body":{"index.html":{}}}],["api/api.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["api/auth/dto/sign",{"_index":472,"title":{},"body":{"classes/UserRepository.html":{}}}],["api/tasks/dto/create",{"_index":292,"title":{},"body":{"classes/TaskRepository.html":{}}}],["api/tasks/dto/get",{"_index":294,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TasksResolver.html":{}}}],["api/tasks/tasks.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["api/tasks/tasks.service",{"_index":404,"title":{},"body":{"classes/TasksResolver.html":{}}}],["apimodule",{"_index":1,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apiproperty",{"_index":189,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/SignUpCredentialsDto.html":{}}}],["apiproperty()@isnotempty",{"_index":186,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["apiproperty()@isnotempty()@minlength(3)@maxlength(50",{"_index":249,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8)@maxlength(50",{"_index":247,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["apiresponse",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["apitags('auth",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('tasks",{"_index":365,"title":{},"body":{"controllers/TasksController.html":{}}}],["apollo",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":572,"title":{},"body":{"index.html":{}}}],["applications",{"_index":562,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":31,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":406,"title":{},"body":{"classes/TasksResolver.html":{}}}],["args.dto",{"_index":411,"title":{},"body":{"classes/TasksResolver.html":{}}}],["args.dto.ts",{"_index":172,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"coverage.html":{}}}],["args.dto.ts:12",{"_index":177,"title":{},"body":{"classes/CreateTaskArgsDto.html":{}}}],["args.dto.ts:8",{"_index":178,"title":{},"body":{"classes/CreateTaskArgsDto.html":{}}}],["args/create",{"_index":410,"title":{},"body":{"classes/TasksResolver.html":{}}}],["args/update",{"_index":408,"title":{},"body":{"classes/TasksResolver.html":{}}}],["argstype",{"_index":182,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskArgsDto.html":{}}}],["async",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["auth",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller",{"_index":51,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":227,"title":{},"body":{"injectables/JWTStrategy.html":{},"controllers/TasksController.html":{}}}],["authguard('jwt",{"_index":233,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":604,"title":{},"body":{"index.html":{}}}],["authorized",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["authservice",{"_index":89,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoschemafile",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":616,"title":{},"body":{"modules.html":{}}}],["await",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["backers",{"_index":595,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":324,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["badrequestexception(`${status",{"_index":327,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["baseentity",{"_index":258,"title":{},"body":{"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["bcrypt",{"_index":455,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":459,"title":{},"body":{"classes/UserEntity.html":{}}}],["bcrypt.gensalt",{"_index":489,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":490,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt/bcrypt.js",{"_index":468,"title":{},"body":{"classes/UserRepository.html":{}}}],["body",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["body('status",{"_index":381,"title":{},"body":{"controllers/TasksController.html":{}}}],["body(validationpipe",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":614,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":612,"title":{},"body":{"modules.html":{}}}],["building",{"_index":558,"title":{},"body":{"index.html":{}}}],["catch",{"_index":478,"title":{},"body":{"classes/UserRepository.html":{}}}],["class",{"_index":27,"title":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":169,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_apimodule",{"_index":9,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":10,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_graphqlmodule",{"_index":212,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["cluster_graphqlmodule_imports",{"_index":213,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["cluster_tasksmodule",{"_index":383,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_exports",{"_index":385,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":384,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":386,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["column",{"_index":273,"title":{},"body":{"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["config/typeorm.config",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":469,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('this",{"_index":482,"title":{},"body":{"classes/UserRepository.html":{}}}],["const",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{}}}],["constructor(private",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["constructor(taskrepository",{"_index":417,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(tasksservice",{"_index":392,"title":{},"body":{"classes/TasksResolver.html":{}}}],["constructor(title",{"_index":259,"title":{},"body":{"classes/TaskEntity.html":{}}}],["constructor(username",{"_index":448,"title":{},"body":{"classes/UserEntity.html":{}}}],["constructor(userrepository",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["context",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":50,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":366,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["coverage",{"_index":491,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["createparamdecorator",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":283,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["createtask(@args",{"_index":413,"title":{},"body":{"classes/TasksResolver.html":{}}}],["createtask(@body",{"_index":369,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(createtaskdto",{"_index":285,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["createtaskargsdto",{"_index":168,"title":{"classes/CreateTaskArgsDto.html":{}},"body":{"classes/CreateTaskArgsDto.html":{},"classes/TasksResolver.html":{},"coverage.html":{}}}],["createtaskdto",{"_index":183,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["credentials.dto",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["credentials.dto.ts",{"_index":245,"title":{},"body":{"classes/SignUpCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:15",{"_index":248,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["credentials.dto.ts:9",{"_index":250,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["database",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debug",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorators",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{}}}],["default",{"_index":268,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JWTStrategy.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["delete",{"_index":352,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id",{"_index":377,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id')@useguards(undefined",{"_index":341,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleteresult",{"_index":428,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletetaskbyid",{"_index":334,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetaskbyid(id",{"_index":340,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"index.html":{}}}],["development",{"_index":573,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":550,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto/create",{"_index":359,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/get",{"_index":362,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/sign",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e2e",{"_index":584,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":559,"title":{},"body":{"index.html":{}}}],["entities",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/task.entity",{"_index":291,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entities/user.entity",{"_index":471,"title":{},"body":{"classes/UserRepository.html":{}}}],["entity",{"_index":271,"title":{},"body":{"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["entity.decorator.ts",{"_index":498,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entity.{js,ts",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":290,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(taskentity",{"_index":296,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(userentity",{"_index":473,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":267,"title":{},"body":{"classes/TaskEntity.html":{}}}],["enumerations",{"_index":545,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":479,"title":{},"body":{"classes/UserRepository.html":{}}}],["error.code",{"_index":480,"title":{},"body":{"classes/UserRepository.html":{}}}],["exist",{"_index":484,"title":{},"body":{"classes/UserRepository.html":{}}}],["expiresin",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":26,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":232,"title":{},"body":{"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":229,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":236,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["field",{"_index":181,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/UpdateTaskArgsDto.html":{}}}],["field()@column",{"_index":261,"title":{},"body":{"classes/TaskEntity.html":{}}}],["field()@column({type",{"_index":266,"title":{},"body":{"classes/TaskEntity.html":{}}}],["field()@isnotempty",{"_index":176,"title":{},"body":{"classes/CreateTaskArgsDto.html":{}}}],["field()@primarygeneratedcolumn",{"_index":264,"title":{},"body":{"classes/TaskEntity.html":{}}}],["field(type",{"_index":211,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["field(undefined",{"_index":442,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{}}}],["field({nullable",{"_index":199,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["filter.dto",{"_index":295,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["filter.dto.ts",{"_index":197,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:10",{"_index":201,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filter.dto.ts:16",{"_index":204,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["findtasksbyfilter",{"_index":284,"title":{},"body":{"classes/TaskRepository.html":{}}}],["findtasksbyfilter(tasksfilter",{"_index":287,"title":{},"body":{"classes/TaskRepository.html":{}}}],["found",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["framework",{"_index":557,"title":{},"body":{"index.html":{}}}],["function",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":551,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":344,"title":{},"body":{"controllers/TasksController.html":{}}}],["getaccesstoken",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["getaccesstoken(user",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["getalltasks",{"_index":415,"title":{},"body":{"injectables/TasksService.html":{}}}],["getfilteredtasks",{"_index":416,"title":{},"body":{"injectables/TasksService.html":{}}}],["getfilteredtasks(tasksfilter",{"_index":422,"title":{},"body":{"injectables/TasksService.html":{}}}],["gettask",{"_index":391,"title":{},"body":{"classes/TasksResolver.html":{}}}],["gettask(@args('id",{"_index":412,"title":{},"body":{"classes/TasksResolver.html":{}}}],["gettask(id",{"_index":396,"title":{},"body":{"classes/TasksResolver.html":{}}}],["gettaskbyid",{"_index":335,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyid(@param('id",{"_index":375,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettaskbyid(id",{"_index":343,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyiddto",{"_index":190,"title":{"classes/GetTaskByIdDto.html":{}},"body":{"classes/GetTaskByIdDto.html":{},"coverage.html":{}}}],["gettasks",{"_index":336,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["gettasks(tasksfilter",{"_index":346,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["gettasksfilterdto",{"_index":195,"title":{"classes/GetTasksFilterDto.html":{}},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["getting",{"_index":553,"title":{"index.html":{}},"body":{}}],["getuserentity",{"_index":500,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":615,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["graphql/graphql.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule",{"_index":34,"title":{"modules/GraphqlModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GraphqlModule.html":{},"modules.html":{},"overview.html":{}}}],["graphqlmodule.forroot",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":590,"title":{},"body":{"index.html":{}}}],["hash",{"_index":446,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["hashpassword",{"_index":461,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":463,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":563,"title":{},"body":{"index.html":{}}}],["here",{"_index":601,"title":{},"body":{"index.html":{}}}],["host",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":608,"title":{},"body":{"index.html":{}}}],["id",{"_index":193,"title":{},"body":{"classes/GetTaskByIdDto.html":{},"classes/TaskEntity.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{}}}],["identifier",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":310,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{}}}],["in_progress",{"_index":549,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":56,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["inject",{"_index":426,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectable",{"_index":132,"title":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectrepository",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["injectrepository(userrepository",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["inspired",{"_index":564,"title":{},"body":{"index.html":{}}}],["installation",{"_index":569,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":571,"title":{},"body":{"index.html":{}}}],["interface",{"_index":216,"title":{"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{}},"body":{"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":217,"title":{},"body":{"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["internalservererrorexception",{"_index":470,"title":{},"body":{"classes/UserRepository.html":{}}}],["invalid",{"_index":328,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isenum",{"_index":208,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isenum(taskstatus",{"_index":210,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isnotempty",{"_index":179,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{}}}],["isoptional",{"_index":207,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isvalidstatus",{"_index":314,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isvalidstatus(status",{"_index":320,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["join",{"_index":597,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":235,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["jwtmodule",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":165,"title":{"interfaces/JWTPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"injectables/JWTStrategy.html":{},"coverage.html":{}}}],["jwtresponse",{"_index":94,"title":{"interfaces/JWTResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JWTResponse.html":{},"coverage.html":{}}}],["jwtservice",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":115,"title":{"injectables/JWTStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttoken",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["kamil",{"_index":605,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["license",{"_index":611,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":588,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lower(description",{"_index":304,"title":{},"body":{"classes/TaskRepository.html":{}}}],["lower(title",{"_index":303,"title":{},"body":{"classes/TaskRepository.html":{}}}],["matching",{"_index":29,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":252,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["maxlength(50",{"_index":254,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["metadata",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["minlength",{"_index":251,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["minlength(3",{"_index":253,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["minlength(8",{"_index":255,"title":{},"body":{"classes/SignUpCredentialsDto.html":{}}}],["miscellaneous",{"_index":544,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":587,"title":{},"body":{"index.html":{}}}],["mode",{"_index":577,"title":{},"body":{"index.html":{}}}],["models/entities/task",{"_index":205,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{}}}],["models/entities/task.entity",{"_index":427,"title":{},"body":{"injectables/TasksService.html":{}}}],["models/entities/user.entity",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["models/repositories/task.repository",{"_index":429,"title":{},"body":{"injectables/TasksService.html":{}}}],["models/repositories/user.repository",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["modelsmodule",{"_index":114,"title":{"modules/ModelsModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["module",{"_index":0,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/ModelsModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":600,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":407,"title":{},"body":{"classes/TasksResolver.html":{}}}],["mutation(undefined",{"_index":394,"title":{},"body":{"classes/TasksResolver.html":{}}}],["myśliwiec",{"_index":606,"title":{},"body":{"index.html":{}}}],["name",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["nest",{"_index":566,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":610,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/GraphqlModule.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskArgsDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskDto.html":{},"classes/SignUpCredentialsDto.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"dependencies.html":{}}}],["new",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["node.js",{"_index":556,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["notfoundexception('user",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`task",{"_index":433,"title":{},"body":{"injectables/TasksService.html":{}}}],["npm",{"_index":570,"title":{},"body":{"index.html":{}}}],["null",{"_index":487,"title":{},"body":{"classes/UserRepository.html":{}}}],["nullable",{"_index":209,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["number",{"_index":263,"title":{},"body":{"classes/TaskEntity.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{}}}],["object.keys(tasksfilter).length",{"_index":372,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["objecttype",{"_index":275,"title":{},"body":{"classes/TaskEntity.html":{}}}],["open",{"_index":548,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["optional",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["overview",{"_index":617,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":511,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":351,"title":{},"body":{"controllers/TasksController.html":{}}}],["param('id",{"_index":378,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["parseintpipe",{"_index":355,"title":{},"body":{"controllers/TasksController.html":{}}}],["passport",{"_index":230,"title":{},"body":{"injectables/JWTStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":226,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["password",{"_index":246,"title":{},"body":{"classes/SignUpCredentialsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":353,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status",{"_index":380,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status')@useguards(undefined",{"_index":349,"title":{},"body":{"controllers/TasksController.html":{}}}],["payload",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["payload.ts",{"_index":219,"title":{},"body":{"interfaces/JWTPayload.html":{},"coverage.html":{}}}],["pg",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["pipe/task",{"_index":360,"title":{},"body":{"controllers/TasksController.html":{}}}],["pipetransform",{"_index":311,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["playground",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":598,"title":{},"body":{"index.html":{}}}],["port",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('signin",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin')@apiresponse({status",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@apiresponse({status",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(undefined)@usepipes(validationpipe",{"_index":338,"title":{},"body":{"controllers/TasksController.html":{}}}],["postgres",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["primarygeneratedcolumn",{"_index":272,"title":{},"body":{"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["private",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/UserRepository.html":{}}}],["production",{"_index":579,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":555,"title":{},"body":{"index.html":{}}}],["project",{"_index":589,"title":{},"body":{"index.html":{}}}],["promise",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["properties",{"_index":173,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["query",{"_index":299,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["query(undefined",{"_index":397,"title":{},"body":{"classes/TasksResolver.html":{}}}],["query(validationpipe",{"_index":371,"title":{},"body":{"controllers/TasksController.html":{}}}],["query.andwhere",{"_index":302,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.andwhere('status",{"_index":301,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.getmany",{"_index":306,"title":{},"body":{"classes/TaskRepository.html":{}}}],["read",{"_index":599,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":312,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["reflect",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["registerenumtype",{"_index":276,"title":{},"body":{"classes/TaskEntity.html":{}}}],["registerenumtype(taskstatus",{"_index":277,"title":{},"body":{"classes/TaskEntity.html":{}}}],["reponse",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reponse.ts",{"_index":220,"title":{},"body":{"interfaces/JWTResponse.html":{},"coverage.html":{}}}],["repositories/task.repository",{"_index":241,"title":{},"body":{"modules/ModelsModule.html":{}}}],["repositories/user.repository",{"_index":242,"title":{},"body":{"modules/ModelsModule.html":{}}}],["repository",{"_index":282,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["request",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["resolver",{"_index":405,"title":{},"body":{"classes/TasksResolver.html":{}}}],["result",{"_index":28,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":436,"title":{},"body":{"injectables/TasksService.html":{}}}],["results",{"_index":30,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["rimraf",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":574,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":488,"title":{},"body":{"classes/UserRepository.html":{}}}],["scalable",{"_index":560,"title":{},"body":{"index.html":{}}}],["search",{"_index":198,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{}}}],["search.tolowercase",{"_index":305,"title":{},"body":{"classes/TaskRepository.html":{}}}],["secret",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{}}}],["secretorkey",{"_index":237,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["server",{"_index":519,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["side",{"_index":561,"title":{},"body":{"index.html":{}}}],["signin",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signincredentials",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["signincredentials",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signoptions",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(signupcredentials",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signupcredentials",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signupcredentialsdto",{"_index":62,"title":{"classes/SignUpCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpCredentialsDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["single",{"_index":192,"title":{},"body":{"classes/GetTaskByIdDto.html":{},"coverage.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"modules/GraphqlModule.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["sponsors",{"_index":592,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":552,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task",{"_index":546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../typeorm.config.ts",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/api/api.module.ts",{"_index":20,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/api/auth/auth.controller.ts",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/api/auth/auth.controller.ts:17",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/auth/auth.controller.ts:28",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/auth/auth.module",{"_index":25,"title":{},"body":{"modules/ApiModule.html":{},"modules/TasksModule.html":{}}}],["src/api/auth/auth.module.ts",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/api/auth/auth.service.ts",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/api/auth/auth.service.ts:10",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/auth/auth.service.ts:16",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/auth/auth.service.ts:20",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/auth/auth.service.ts:34",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/auth/decorators/get",{"_index":497,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/api/auth/dto/sign",{"_index":244,"title":{},"body":{"classes/SignUpCredentialsDto.html":{},"coverage.html":{}}}],["src/api/auth/interfaces/jwt",{"_index":218,"title":{},"body":{"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"coverage.html":{}}}],["src/api/auth/jwt.strategy.ts",{"_index":221,"title":{},"body":{"injectables/JWTStrategy.html":{},"coverage.html":{}}}],["src/api/auth/jwt.strategy.ts:20",{"_index":225,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/api/auth/jwt.strategy.ts:9",{"_index":223,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/api/tasks/dto/create",{"_index":184,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/api/tasks/dto/get",{"_index":191,"title":{},"body":{"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["src/api/tasks/pipe/task",{"_index":308,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["src/api/tasks/tasks.controller.ts",{"_index":333,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/api/tasks/tasks.controller.ts:33",{"_index":339,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.controller.ts:38",{"_index":347,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.controller.ts:48",{"_index":345,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.controller.ts:54",{"_index":342,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.controller.ts:63",{"_index":350,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/api/tasks/tasks.module",{"_index":24,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/api/tasks/tasks.module.ts",{"_index":387,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/api/tasks/tasks.service.ts",{"_index":414,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/api/tasks/tasks.service.ts:11",{"_index":418,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:14",{"_index":423,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:20",{"_index":421,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:24",{"_index":424,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:30",{"_index":419,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:34",{"_index":420,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/api/tasks/tasks.service.ts:41",{"_index":425,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app.module.ts",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/typeorm.config.ts",{"_index":506,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/graphql/graphql.module.ts",{"_index":214,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/graphql/tasks/args/create",{"_index":170,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"coverage.html":{}}}],["src/graphql/tasks/args/update",{"_index":440,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{},"coverage.html":{}}}],["src/graphql/tasks/tasks.module",{"_index":215,"title":{},"body":{"modules/GraphqlModule.html":{}}}],["src/graphql/tasks/tasks.resolver.ts",{"_index":390,"title":{},"body":{"classes/TasksResolver.html":{},"coverage.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:13",{"_index":399,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:23",{"_index":398,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:28",{"_index":402,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:36",{"_index":395,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/graphql/tasks/tasks.resolver.ts:9",{"_index":393,"title":{},"body":{"classes/TasksResolver.html":{}}}],["src/main.ts",{"_index":507,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/models/entities/task",{"_index":364,"title":{},"body":{"controllers/TasksController.html":{},"miscellaneous/enumerations.html":{}}}],["src/models/entities/task.entity",{"_index":363,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["src/models/entities/task.entity.ts",{"_index":257,"title":{},"body":{"classes/TaskEntity.html":{},"coverage.html":{}}}],["src/models/entities/task.entity.ts:14",{"_index":265,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/models/entities/task.entity.ts:18",{"_index":270,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/models/entities/task.entity.ts:22",{"_index":262,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/models/entities/task.entity.ts:30",{"_index":260,"title":{},"body":{"classes/TaskEntity.html":{}}}],["src/models/entities/user.entity.ts",{"_index":445,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/models/entities/user.entity.ts:14",{"_index":450,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/models/entities/user.entity.ts:17",{"_index":451,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/models/entities/user.entity.ts:20",{"_index":449,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/models/entities/user.entity.ts:28",{"_index":453,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/models/models.module",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["src/models/models.module.ts",{"_index":239,"title":{},"body":{"modules/ModelsModule.html":{}}}],["src/models/repositories/task.repository.ts",{"_index":281,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/models/repositories/task.repository.ts:15",{"_index":288,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/models/repositories/task.repository.ts:8",{"_index":286,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/models/repositories/user.repository.ts",{"_index":460,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/models/repositories/user.repository.ts:14",{"_index":465,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/models/repositories/user.repository.ts:28",{"_index":467,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/models/repositories/user.repository.ts:37",{"_index":464,"title":{},"body":{"classes/UserRepository.html":{}}}],["start",{"_index":575,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":578,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":580,"title":{},"body":{"index.html":{}}}],["started",{"_index":554,"title":{"index.html":{}},"body":{}}],["starter",{"_index":568,"title":{},"body":{"index.html":{}}}],["statements",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"coverage.html":{}}}],["status.enum",{"_index":206,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{}}}],["status.enum.ts",{"_index":547,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["status.length",{"_index":329,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["stay",{"_index":602,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":228,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["string",{"_index":175,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{}}}],["successfully",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":234,"title":{},"body":{"injectables/JWTStrategy.html":{},"classes/TaskEntity.html":{},"classes/UserEntity.html":{}}}],["support",{"_index":593,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":613,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":171,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["task.args.dto",{"_index":409,"title":{},"body":{"classes/TasksResolver.html":{}}}],["task.args.dto.ts",{"_index":441,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{},"coverage.html":{}}}],["task.args.dto.ts:10",{"_index":444,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{}}}],["task.args.dto.ts:7",{"_index":443,"title":{},"body":{"classes/UpdateTaskArgsDto.html":{}}}],["task.dto",{"_index":293,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":185,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"coverage.html":{}}}],["task.dto.ts:11",{"_index":187,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:2",{"_index":194,"title":{},"body":{"classes/GetTaskByIdDto.html":{}}}],["task.dto.ts:7",{"_index":188,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.save",{"_index":439,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.status",{"_index":438,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskentity",{"_index":256,"title":{"classes/TaskEntity.html":{}},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["taskentity(title",{"_index":297,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskmanagement",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taskrepository",{"_index":240,"title":{"classes/TaskRepository.html":{}},"body":{"modules/ModelsModule.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":196,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks.controller",{"_index":388,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":358,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["taskscontroller",{"_index":332,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksfilter",{"_index":289,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["tasksmodule",{"_index":13,"title":{"modules/TasksModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksresolver",{"_index":389,"title":{"classes/TasksResolver.html":{}},"body":{"classes/TasksResolver.html":{},"coverage.html":{}}}],["tasksservice",{"_index":357,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":202,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.done",{"_index":318,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.in_progress",{"_index":317,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.open",{"_index":278,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["taskstatusvalidationpipe",{"_index":307,"title":{"classes/TaskStatusValidationPipe.html":{}},"body":{"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["test",{"_index":583,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":586,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":585,"title":{},"body":{"index.html":{}}}],["tests",{"_index":582,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":591,"title":{},"body":{"index.html":{}}}],["this.allowedstatuses.includes(status",{"_index":331,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.authservice.signup(signupcredentials",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(signincredentials",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createquerybuilder",{"_index":300,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.description",{"_index":280,"title":{},"body":{"classes/TaskEntity.html":{}}}],["this.findone",{"_index":485,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.getaccesstoken(user",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettaskbyid(id",{"_index":437,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.hash",{"_index":458,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.hashpassword(password",{"_index":474,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.isvalidstatus(status",{"_index":326,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.jwtservice.sign(payload",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.save(task",{"_index":298,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.taskrepository.createtask(createtaskdto",{"_index":434,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.delete(id",{"_index":435,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.find",{"_index":431,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findone(id",{"_index":432,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findtasksbyfilter(tasksfilter",{"_index":430,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":370,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.tasksservice.deletetaskbyid(id",{"_index":379,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.getalltasks",{"_index":374,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.tasksservice.getfilteredtasks(tasksfilter",{"_index":373,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.tasksservice.gettaskbyid(id",{"_index":376,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.tasksservice.updatetaskstatus(id",{"_index":382,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{}}}],["this.title",{"_index":279,"title":{},"body":{"classes/TaskEntity.html":{}}}],["this.username",{"_index":457,"title":{},"body":{"classes/UserEntity.html":{}}}],["this.userrepository.findone",{"_index":238,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["this.userrepository.signup(signupcredentials",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.validateuserpassword",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["title",{"_index":174,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{}}}],["touch",{"_index":603,"title":{},"body":{"index.html":{}}}],["transform",{"_index":315,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transform(value",{"_index":322,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transformer",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/GetTasksFilterDto.html":{},"miscellaneous/variables.html":{}}}],["true})@field(undefined)@isoptional()@isnotempty",{"_index":203,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["true})@isoptional()@isenum(taskstatus",{"_index":200,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["try",{"_index":476,"title":{},"body":{"classes/UserRepository.html":{}}}],["twitter",{"_index":609,"title":{},"body":{"index.html":{}}}],["type",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTaskByIdDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JWTPayload.html":{},"interfaces/JWTResponse.html":{},"injectables/JWTStrategy.html":{},"classes/SignUpCredentialsDto.html":{},"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskArgsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":274,"title":{},"body":{"classes/TaskEntity.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/ModelsModule.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":243,"title":{},"body":{"modules/ModelsModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":567,"title":{},"body":{"index.html":{}}}],["ui",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":231,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["undefined",{"_index":269,"title":{},"body":{"classes/TaskEntity.html":{}}}],["unique",{"_index":454,"title":{},"body":{"classes/UserEntity.html":{}}}],["unique(['username",{"_index":456,"title":{},"body":{"classes/UserEntity.html":{}}}],["unit",{"_index":581,"title":{},"body":{"index.html":{}}}],["up",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpCredentialsDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["updatetaskargs",{"_index":403,"title":{},"body":{"classes/TasksResolver.html":{}}}],["updatetaskargsdto",{"_index":401,"title":{"classes/UpdateTaskArgsDto.html":{}},"body":{"classes/TasksResolver.html":{},"classes/UpdateTaskArgsDto.html":{},"coverage.html":{}}}],["updatetaskstatus",{"_index":337,"title":{},"body":{"controllers/TasksController.html":{},"classes/TasksResolver.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(id",{"_index":348,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(updatetaskargs",{"_index":400,"title":{},"body":{"classes/TasksResolver.html":{}}}],["useguards",{"_index":356,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(authguard",{"_index":367,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes",{"_index":354,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes(validationpipe",{"_index":368,"title":{},"body":{"controllers/TasksController.html":{}}}],["user",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.save",{"_index":477,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":486,"title":{},"body":{"classes/UserRepository.html":{}}}],["userentity",{"_index":144,"title":{"classes/UserEntity.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity(username",{"_index":475,"title":{},"body":{"classes/UserRepository.html":{}}}],["username",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayload.html":{},"injectables/JWTStrategy.html":{},"classes/SignUpCredentialsDto.html":{},"classes/UserEntity.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":140,"title":{"classes/UserRepository.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"modules/ModelsModule.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["uuid",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":222,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["validate(payload",{"_index":224,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["validatepassword",{"_index":447,"title":{},"body":{"classes/UserEntity.html":{}}}],["validatepassword(password",{"_index":452,"title":{},"body":{"classes/UserEntity.html":{}}}],["validateuser",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(signincredentials",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserpassword",{"_index":462,"title":{},"body":{"classes/UserRepository.html":{}}}],["validateuserpassword(signincredentials",{"_index":466,"title":{},"body":{"classes/UserRepository.html":{}}}],["validation.pipe",{"_index":361,"title":{},"body":{"controllers/TasksController.html":{}}}],["validation.pipe.ts",{"_index":309,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:11",{"_index":323,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:21",{"_index":321,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:5",{"_index":319,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validationpipe",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["validator",{"_index":180,"title":{},"body":{"classes/CreateTaskArgsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/SignUpCredentialsDto.html":{},"dependencies.html":{}}}],["value",{"_index":316,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.touppercase",{"_index":325,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["variable",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":622,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":576,"title":{},"body":{"index.html":{}}}],["website",{"_index":607,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":596,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GraphqlModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nApiModule -->\n\nTasksModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/api.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksModule } from 'src/api/tasks/tasks.module';\nimport { AuthModule } from 'src/api/auth/auth.module';\n\n@Module({\n  imports: [TasksModule, AuthModule],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nAppModule -->\n\nGraphqlModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            GraphqlModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\n// import { TasksModule } from './api/tasks/tasks.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TypeOrmConfig } from './config/typeorm.config';\nimport { ApiModule } from './api/api.module';\nimport { GraphqlModule } from './graphql/graphql.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(TypeOrmConfig),\n    GraphQLModule.forRoot({\n      debug: true,\n      playground: true,\n      autoSchemaFile: true,\n    }),\n    ApiModule,\n    GraphqlModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInCredentials: SignUpCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')@ApiResponse({status: 200, description: 'The user has been successfully authorized and get jwttoken.'})\n                \n            \n\n            \n                \n                    Defined in src/api/auth/auth.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpCredentials: SignUpCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@ApiResponse({status: 201, description: 'The user has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in src/api/auth/auth.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, ValidationPipe, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignUpCredentialsDto } from './dto/sign-up-credentials.dto';\nimport { JWTResponse } from './interfaces/jwt-reponse';\nimport { ApiTags, ApiResponse } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('signup')\n  @ApiResponse({\n    status: 201,\n    description: 'The user has been successfully created.',\n  })\n  async signUp(\n    @Body(ValidationPipe) signUpCredentials: SignUpCredentialsDto,\n  ): Promise {\n    return this.authService.signUp(signUpCredentials);\n  }\n\n  @Post('signin')\n  @ApiResponse({\n    status: 200,\n    description: 'The user has been successfully authorized and get jwttoken.',\n  })\n  async signIn(\n    @Body(ValidationPipe) signInCredentials: SignUpCredentialsDto,\n  ): Promise {\n    return this.authService.validateUser(signInCredentials);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nModelsModule\n\nModelsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nModelsModule->AuthModule\n\n\n\n\n\nJWTStrategy \n\nJWTStrategy \n\nJWTStrategy  -->\n\nAuthModule->JWTStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JWTStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ModelsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JWTStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JWTStrategy } from './jwt.strategy';\nimport { ModelsModule } from 'src/models/models.module';\n\n@Module({\n  imports: [\n    ModelsModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      secret: 'secret',\n      signOptions: {\n        expiresIn: '60s',\n      },\n    }),\n  ],\n  providers: [AuthService, JWTStrategy],\n  exports: [JWTStrategy, PassportModule],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getAccessToken\n                            \n                            \n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/api/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAccessToken(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/api/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JWTResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(signUpCredentials: SignUpCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(signInCredentials: SignUpCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { UserRepository } from '../../models/repositories/user.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SignUpCredentialsDto } from './dto/sign-up-credentials.dto';\nimport { UserEntity } from '../../models/entities/user.entity';\nimport { JwtService } from '@nestjs/jwt';\nimport { JWTResponse } from './interfaces/jwt-reponse';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserRepository) private userRepository: UserRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  signUp(signUpCredentials: SignUpCredentialsDto): Promise {\n    return this.userRepository.signUp(signUpCredentials);\n  }\n\n  async validateUser(\n    signInCredentials: SignUpCredentialsDto,\n  ): Promise {\n    const user: UserEntity = await this.userRepository.validateUserPassword(\n      signInCredentials,\n    );\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return this.getAccessToken(user);\n  }\n\n  private getAccessToken(user: UserEntity): JWTResponse {\n    const { username } = user;\n    const payload: JWTPayload = { username };\n    const accessToken = this.jwtService.sign(payload);\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskArgsDto.html":{"url":"classes/CreateTaskArgsDto.html","title":"class - CreateTaskArgsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskArgsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/tasks/args/create-task-args.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/graphql/tasks/args/create-task-args.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/graphql/tasks/args/create-task-args.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { Field, ArgsType } from '@nestjs/graphql';\n\n@ArgsType()\nexport class CreateTaskArgsDto {\n  @Field()\n  @IsNotEmpty()\n  title: string;\n\n  @Field()\n  @IsNotEmpty()\n  description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/create-task.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/create-task.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateTaskDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTaskByIdDto.html":{"url":"classes/GetTaskByIdDto.html","title":"class - GetTaskByIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTaskByIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/dto/get-single-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/get-single-task.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetTaskByIdDto {\n  id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTasksFilterDto.html":{"url":"classes/GetTasksFilterDto.html","title":"class - GetTasksFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTasksFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/dto/get-tasks-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({nullable: true})@IsOptional()@IsEnum(TaskStatus)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/get-tasks-filter.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field({nullable: true})@Field(undefined)@IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/dto/get-tasks-filter.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TaskStatus } from '../../../models/entities/task-status.enum';\nimport { IsOptional, IsEnum, IsNotEmpty } from 'class-validator';\nimport { ArgsType, Field } from '@nestjs/graphql';\n\n@ArgsType()\nexport class GetTasksFilterDto {\n  @Field({ nullable: true })\n  @IsOptional()\n  @IsEnum(TaskStatus)\n  search: string;\n\n  @Field({ nullable: true })\n  @Field(type => TaskStatus)\n  @IsOptional()\n  @IsNotEmpty()\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GraphqlModule.html":{"url":"modules/GraphqlModule.html","title":"module - GraphqlModule","body":"\n                   \n\n\n\n\n    Modules\n    GraphqlModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GraphqlModule\n\n\n\ncluster_GraphqlModule_imports\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nGraphqlModule -->\n\nTasksModule->GraphqlModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/graphql/graphql.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksModule } from 'src/graphql/tasks/tasks.module';\n\n@Module({\n  imports: [TasksModule],\n})\nexport class GraphqlModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTPayload.html":{"url":"interfaces/JWTPayload.html","title":"interface - JWTPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JWTPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/interfaces/jwt-payload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface JWTPayload {\n  username: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTResponse.html":{"url":"interfaces/JWTResponse.html","title":"interface - JWTResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JWTResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/interfaces/jwt-reponse.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        accessToken\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JWTResponse {\n  accessToken: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTStrategy.html":{"url":"injectables/JWTStrategy.html","title":"injectable - JWTStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JWTStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/api/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JWTPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/api/auth/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JWTPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserEntity } from '../../models/entities/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from '../../models/repositories/user.repository';\nimport { PassportStrategy, AuthGuard } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { UnauthorizedException, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JWTStrategy extends AuthGuard('jwt') {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'secret',\n    });\n  }\n\n  async validate(payload: JWTPayload): Promise {\n    const { username } = payload;\n    const user = await this.userRepository.findOne({ username });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ModelsModule.html":{"url":"modules/ModelsModule.html","title":"module - ModelsModule","body":"\n                   \n\n\n\n\n    Modules\n    ModelsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/models/models.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskRepository } from './repositories/task.repository';\nimport { UserRepository } from './repositories/user.repository';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TaskRepository, UserRepository])],\n  exports: [TypeOrmModule],\n})\nexport class ModelsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpCredentialsDto.html":{"url":"classes/SignUpCredentialsDto.html","title":"class - SignUpCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/auth/dto/sign-up-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@MinLength(8)@MaxLength(50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/auth/dto/sign-up-credentials.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()@MinLength(3)@MaxLength(50)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/auth/dto/sign-up-credentials.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength, MaxLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SignUpCredentialsDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(50)\n  username: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(50)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskEntity.html":{"url":"classes/TaskEntity.html","title":"class - TaskEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/entities/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(title, description)\n                    \n                \n                        \n                            \n                                Defined in src/models/entities/task.entity.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        title\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/task.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/task.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column({type: 'enum', enum: TaskStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/task.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/task.entity.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\nimport { TaskStatus } from './task-status.enum';\nimport { ObjectType, Field, ID, registerEnumType } from '@nestjs/graphql';\n\nregisterEnumType(TaskStatus, {\n  name: 'TaskStatus',\n});\n\n@ObjectType()\n@Entity()\nexport class TaskEntity extends BaseEntity {\n  @Field()\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field()\n  @Column()\n  title: string;\n\n  @Field()\n  @Column()\n  description: string;\n\n  @Field()\n  @Column({\n    type: 'enum',\n    enum: TaskStatus,\n    default: TaskStatus.OPEN,\n  })\n  status: TaskStatus;\n\n  constructor(title, description) {\n    super();\n    this.title = title;\n    this.description = description;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/repositories/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                findTasksByFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/task.repository.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findTasksByFilter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findTasksByFilter(tasksFilter: GetTasksFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/task.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilter\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Repository, EntityRepository } from 'typeorm';\nimport { TaskEntity } from '../entities/task.entity';\nimport { CreateTaskDto } from '../../api/tasks/dto/create-task.dto';\nimport { GetTasksFilterDto } from '../../api/tasks/dto/get-tasks-filter.dto';\n\n@EntityRepository(TaskEntity)\nexport class TaskRepository extends Repository {\n  async createTask(createTaskDto: CreateTaskDto): Promise {\n    const { title, description } = createTaskDto;\n    const task = new TaskEntity(title, description);\n    await this.save(task);\n    return task;\n  }\n\n  async findTasksByFilter(\n    tasksFilter: GetTasksFilterDto,\n  ): Promise {\n    const { status, search } = tasksFilter;\n\n    let tasks: TaskEntity[] = [];\n    const query = this.createQueryBuilder();\n\n    if (status) {\n      query.andWhere('status = :status', { status });\n    }\n\n    if (search) {\n      query.andWhere(\n        'LOWER(title) LIKE :search OR LOWER(description) LIKE :search',\n        { search: `%${search.toLowerCase()}%` },\n      );\n    }\n\n    tasks = await query.getMany();\n    return tasks;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskStatusValidationPipe.html":{"url":"classes/TaskStatusValidationPipe.html","title":"class - TaskStatusValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskStatusValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/pipe/task-status-validation.pipe.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            PipeTransform\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allowedStatuses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isValidStatus\n                            \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            allowedStatuses\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/api/tasks/pipe/task-status-validation.pipe.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isValidStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isValidStatus(status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/pipe/task-status-validation.pipe.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/pipe/task-status-validation.pipe.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PipeTransform, BadRequestException } from '@nestjs/common';\nimport { TaskStatus } from '../../../models/entities/task-status.enum';\n\nexport class TaskStatusValidationPipe implements PipeTransform {\n  readonly allowedStatuses = [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ];\n\n  transform(value: any) {\n    const status = value.toUpperCase();\n\n    if (!this.isValidStatus(status)) {\n      throw new BadRequestException(`${status} is invalid value of status`);\n    }\n\n    return status;\n  }\n\n  private isValidStatus(status: any) {\n    return status.length > 0 && this.allowedStatuses.includes(status);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTaskById\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTaskById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(tasksFilter: GetTasksFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilter\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(id: number, status: TaskStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/tasks/tasks.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Patch,\n  UsePipes,\n  ValidationPipe,\n  Query,\n  ParseIntPipe,\n  UseGuards,\n} from '@nestjs/common';\n\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { TaskStatusValidationPipe } from './pipe/task-status-validation.pipe';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskEntity } from 'src/models/entities/task.entity';\nimport { TaskStatus } from 'src/models/entities/task-status.enum';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\n\n@ApiTags('tasks')\n@Controller('tasks')\nexport class TasksController {\n  constructor(private tasksService: TasksService) {}\n\n  @Post()\n  @UseGuards(AuthGuard())\n  @UsePipes(ValidationPipe)\n  createTask(@Body() createTaskDto: CreateTaskDto) {\n    return this.tasksService.createTask(createTaskDto);\n  }\n\n  @Get()\n  getTasks(\n    @Query(ValidationPipe) tasksFilter: GetTasksFilterDto,\n  ): Promise {\n    if (Object.keys(tasksFilter).length) {\n      return this.tasksService.getFilteredTasks(tasksFilter);\n    }\n    return this.tasksService.getAllTasks();\n  }\n\n  @Get(':id')\n  getTaskById(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.tasksService.getTaskById(id);\n  }\n\n  @Delete(':id')\n  @UseGuards(AuthGuard())\n  deleteTaskById(\n    @Param('id', ParseIntPipe)\n    id: number,\n  ): Promise {\n    return this.tasksService.deleteTaskById(id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(AuthGuard())\n  updateTaskStatus(\n    @Param('id') id: number,\n    @Body('status', TaskStatusValidationPipe) status: TaskStatus,\n  ): Promise {\n    return this.tasksService.updateTaskStatus(id, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nModelsModule\n\nModelsModule\n\nTasksModule -->\n\nModelsModule->TasksModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ModelsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\nimport { AuthModule } from 'src/api/auth/auth.module';\nimport { ModelsModule } from 'src/models/models.module';\n\n@Module({\n  imports: [ModelsModule, AuthModule],\n  exports: [TasksService],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TasksResolver.html":{"url":"classes/TasksResolver.html","title":"class - TasksResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TasksResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/tasks/tasks.resolver.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                getTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tasksService: TasksService)\n                    \n                \n                        \n                            \n                                Defined in src/graphql/tasks/tasks.resolver.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tasksService\n                                                  \n                                                        \n                                                                        TasksService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskArgsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/tasks/tasks.resolver.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskArgsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTask\n                        \n                        \n                    \n                \n            \n            \n                \ngetTask(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/tasks/tasks.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(tasksFilter: GetTasksFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/tasks/tasks.resolver.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilter\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(updateTaskArgs: UpdateTaskArgsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/tasks/tasks.resolver.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateTaskArgs\n                                    \n                                                UpdateTaskArgsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TasksService } from '../../api/tasks/tasks.service';\nimport { Resolver, Query, Args, Mutation } from '@nestjs/graphql';\nimport { GetTasksFilterDto } from '../../api/tasks/dto/get-tasks-filter.dto';\nimport { UpdateTaskArgsDto } from './args/update-task.args.dto';\nimport { CreateTaskArgsDto } from './args/create-task-args.dto';\nimport { TaskEntity } from 'src/models/entities/task.entity';\n\n@Resolver(() => TaskEntity)\nexport class TasksResolver {\n  constructor(private tasksService: TasksService) {}\n\n  @Query(() => [TaskEntity])\n  async getTasks(\n    @Args() tasksFilter: GetTasksFilterDto,\n  ): Promise {\n    if (Object.keys(tasksFilter).length) {\n      return this.tasksService.getFilteredTasks(tasksFilter);\n    }\n    return this.tasksService.getAllTasks();\n  }\n\n  @Query(() => TaskEntity)\n  getTask(@Args('id') id: number): Promise {\n    return this.tasksService.getTaskById(id);\n  }\n\n  @Mutation(() => TaskEntity)\n  updateTaskStatus(\n    @Args() updateTaskArgs: UpdateTaskArgsDto,\n  ): Promise {\n    const { id, status } = updateTaskArgs;\n    return this.tasksService.updateTaskStatus(id, status);\n  }\n\n  @Mutation(() => TaskEntity)\n  createTask(@Args() createTaskDto: CreateTaskArgsDto): Promise {\n    return this.tasksService.createTask(createTaskDto);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTaskById\n                            \n                            \n                                getAllTasks\n                            \n                            \n                                    Async\n                                getFilteredTasks\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in src/api/tasks/tasks.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllTasks()\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFilteredTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFilteredTasks(tasksFilter: GetTasksFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tasksFilter\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskStatus(id: number, status: TaskStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/api/tasks/tasks.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, Inject } from '@nestjs/common';\n\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskEntity } from '../../models/entities/task.entity';\nimport { DeleteResult } from 'typeorm';\nimport { TaskStatus } from '../../models/entities/task-status.enum';\nimport { TaskRepository } from '../../models/repositories/task.repository';\n\n@Injectable()\nexport class TasksService {\n  constructor(private taskRepository: TaskRepository) {}\n\n  async getFilteredTasks(\n    tasksFilter: GetTasksFilterDto,\n  ): Promise {\n    return this.taskRepository.findTasksByFilter(tasksFilter);\n  }\n\n  getAllTasks(): Promise {\n    return this.taskRepository.find();\n  }\n\n  async getTaskById(id: number): Promise {\n    const found = await this.taskRepository.findOne(id);\n    if (!found) throw new NotFoundException(`Task with ID \"${id}\" not found`);\n    return found;\n  }\n\n  async createTask(createTaskDto: CreateTaskDto): Promise {\n    return this.taskRepository.createTask(createTaskDto);\n  }\n\n  async deleteTaskById(id: number): Promise {\n    const result: DeleteResult = await this.taskRepository.delete(id);\n    if (!result.affected) {\n      throw new NotFoundException(`Task with ID \"${id}\" not found`);\n    }\n  }\n\n  async updateTaskStatus(id: number, status: TaskStatus): Promise {\n    const task: TaskEntity = await this.getTaskById(id);\n    task.status = status;\n    await task.save();\n    return task;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskArgsDto.html":{"url":"classes/UpdateTaskArgsDto.html","title":"class - UpdateTaskArgsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskArgsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/tasks/args/update-task.args.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/graphql/tasks/args/update-task.args.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Field(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/graphql/tasks/args/update-task.args.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TaskStatus } from '../../../models/entities/task-status.enum';\nimport { ArgsType, Field, ID } from '@nestjs/graphql';\n\n@ArgsType()\nexport class UpdateTaskArgsDto {\n  @Field(() => ID)\n  id: number;\n\n  @Field(() => TaskStatus)\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hash\n                            \n                            \n                                id\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(username, password)\n                    \n                \n                        \n                            \n                                Defined in src/models/entities/user.entity.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/models/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password)\n                \n            \n\n\n            \n                \n                    Defined in src/models/entities/user.entity.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Unique,\n} from 'typeorm';\nimport * as bcrypt from 'bcrypt';\n\n@Entity()\n@Unique(['username'])\nexport class UserEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  username: string;\n\n  @Column()\n  hash: string;\n\n  constructor(username, password) {\n    super();\n    this.username = username;\n    this.hash = password;\n  }\n\n  async validatePassword(password): Promise {\n    const { hash } = this;\n    const result = await bcrypt.compare(password, hash);\n    return result;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/repositories/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/user.repository.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpCredentials: SignUpCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/user.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(signInCredentials: SignUpCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/models/repositories/user.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInCredentials\n                                    \n                                                SignUpCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt/bcrypt.js';\n\nimport {\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\n\nimport { UserEntity } from '../entities/user.entity';\nimport { Repository, EntityRepository } from 'typeorm';\nimport { SignUpCredentialsDto } from '../../api/auth/dto/sign-up-credentials.dto';\n\n@EntityRepository(UserEntity)\nexport class UserRepository extends Repository {\n  async signUp(signUpCredentials: SignUpCredentialsDto): Promise {\n    const { username, password } = signUpCredentials;\n    const hash = await this.hashPassword(password);\n    const user = new UserEntity(username, hash);\n    try {\n      await user.save();\n    } catch (error) {\n      if (error.code == 23505) {\n        throw new ConflictException('This user already exist');\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async validateUserPassword(signInCredentials: SignUpCredentialsDto) {\n    const { username, password } = signInCredentials;\n    const user: UserEntity = await this.findOne({ username });\n    if (user && (await user.validatePassword(password))) {\n      return user;\n    }\n    return null;\n  }\n\n  private async hashPassword(password: string) {\n    const salt = await bcrypt.genSalt();\n    const hash = await bcrypt.hash(password, salt);\n    return hash;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/api/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/api/auth/decorators/get-user-entity.decorator.ts\n            \n            variable\n            GetUserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/api/auth/dto/sign-up-credentials.dto.ts\n            \n            class\n            SignUpCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/auth/interfaces/jwt-payload.ts\n            \n            interface\n            JWTPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/auth/interfaces/jwt-reponse.ts\n            \n            interface\n            JWTResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/auth/jwt.strategy.ts\n            \n            injectable\n            JWTStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/tasks/dto/get-single-task.dto.ts\n            \n            class\n            GetTaskByIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/tasks/dto/get-tasks-filter.dto.ts\n            \n            class\n            GetTasksFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/tasks/pipe/task-status-validation.pipe.ts\n            \n            class\n            TaskStatusValidationPipe\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            TypeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/graphql/tasks/args/create-task-args.dto.ts\n            \n            class\n            CreateTaskArgsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/graphql/tasks/args/update-task.args.dto.ts\n            \n            class\n            UpdateTaskArgsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/graphql/tasks/tasks.resolver.ts\n            \n            class\n            TasksResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/entities/task.entity.ts\n            \n            class\n            TaskEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/models/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/models/repositories/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/models/repositories/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/graphql : ^7.2.0\n        \n            @nestjs/jwt : ^7.0.0\n        \n            @nestjs/passport : ^7.0.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.5.1\n        \n            @nestjs/typeorm : ^7.0.0\n        \n            apollo-server-express : ^2.11.0\n        \n            bcrypt : ^4.0.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.1\n        \n            graphql : 14.6.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.24\n        \n            uuid : ^7.0.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../task-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/entities/task-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GraphqlModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModelsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nJWTStrategy \n\nJWTStrategy \n\nJWTStrategy  -->\n\nAuthModule->JWTStrategy \n\n\n\nApiModule -->\n\nTasksModule->ApiModule\n\n\n\n\n\nGraphqlModule\n\nGraphqlModule\n\nGraphqlModule -->\n\nTasksModule->GraphqlModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\nAppModule -->\n\nGraphqlModule->AppModule\n\n\n\n\n\nModelsModule\n\nModelsModule\n\nAuthModule -->\n\nModelsModule->AuthModule\n\n\n\nTasksModule -->\n\nModelsModule->TasksModule\n\n\n\nTasksModule -->\n\nModelsModule->TasksModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUserEntity   (src/.../get-user-entity.decorator.ts)\n                        \n                        \n                            TypeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/api/auth/decorators/get-user-entity.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUserEntity\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (_, context): UserEntity => {\n    const request = context.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TypeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'postgres',\n  password: 'postgres',\n  database: 'taskmanagement',\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: true,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
